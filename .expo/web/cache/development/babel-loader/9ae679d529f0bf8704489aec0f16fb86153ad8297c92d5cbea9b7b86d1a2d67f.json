{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }\nfunction _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport View from \"react-native-web/dist/exports/View\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport { ViewPropTypes } from \"react-native-web/dist/index\";\nimport _ from 'lodash';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nvar viewPropTypes = ViewPropTypes || View.propTypes;\nvar ConfirmationCodeInput = function (_Component) {\n  _inherits(ConfirmationCodeInput, _Component);\n  function ConfirmationCodeInput(props) {\n    var _this;\n    _classCallCheck(this, ConfirmationCodeInput);\n    _this = _callSuper(this, ConfirmationCodeInput, [props]);\n    _this.state = {\n      codeArr: new Array(_this.props.codeLength).fill(''),\n      currentIndex: 0\n    };\n    _this.codeInputRefs = [];\n    return _this;\n  }\n  _createClass(ConfirmationCodeInput, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this$props = this.props,\n        compareWithCode = _this$props.compareWithCode,\n        codeLength = _this$props.codeLength,\n        inputPosition = _this$props.inputPosition;\n      if (compareWithCode && compareWithCode.length !== codeLength) {\n        console.error(\"Invalid props: compareWith length is not equal to codeLength\");\n      }\n      if (_.indexOf(['center', 'left', 'right', 'full-width'], inputPosition) === -1) {\n        console.error('Invalid input position. Must be in: center, left, right, full');\n      }\n    }\n  }, {\n    key: \"clear\",\n    value: function clear() {\n      this.setState({\n        codeArr: new Array(this.props.codeLength).fill(''),\n        currentIndex: 0\n      });\n      this._setFocus(0);\n    }\n  }, {\n    key: \"_setFocus\",\n    value: function _setFocus(index) {\n      this.codeInputRefs[index].focus();\n    }\n  }, {\n    key: \"_blur\",\n    value: function _blur(index) {\n      this.codeInputRefs[index].blur();\n    }\n  }, {\n    key: \"_onFocus\",\n    value: function _onFocus(index) {\n      var newCodeArr = _.clone(this.state.codeArr);\n      var currentEmptyIndex = _.findIndex(newCodeArr, function (c) {\n        return !c;\n      });\n      if (currentEmptyIndex !== -1 && currentEmptyIndex < index) {\n        return this._setFocus(currentEmptyIndex);\n      }\n      for (var i in newCodeArr) {\n        if (i >= index) {\n          newCodeArr[i] = '';\n        }\n      }\n      this.setState({\n        codeArr: newCodeArr,\n        currentIndex: index\n      });\n    }\n  }, {\n    key: \"_isMatchingCode\",\n    value: function _isMatchingCode(code, compareWithCode) {\n      var ignoreCase = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n      if (ignoreCase) {\n        return code.toLowerCase() == compareWithCode.toLowerCase();\n      }\n      return code == compareWithCode;\n    }\n  }, {\n    key: \"_getContainerStyle\",\n    value: function _getContainerStyle(size, position) {\n      switch (position) {\n        case 'left':\n          return {\n            justifyContent: 'flex-start',\n            height: size\n          };\n        case 'center':\n          return {\n            justifyContent: 'center',\n            height: size\n          };\n        case 'right':\n          return {\n            justifyContent: 'flex-end',\n            height: size\n          };\n        default:\n          return {\n            justifyContent: 'space-between',\n            height: size\n          };\n      }\n    }\n  }, {\n    key: \"_getInputSpaceStyle\",\n    value: function _getInputSpaceStyle(space) {\n      var inputPosition = this.props.inputPosition;\n      switch (inputPosition) {\n        case 'left':\n          return {\n            marginRight: space\n          };\n        case 'center':\n          return {\n            marginRight: space / 2,\n            marginLeft: space / 2\n          };\n        case 'right':\n          return {\n            marginLeft: space\n          };\n        default:\n          return {\n            marginRight: 0,\n            marginLeft: 0\n          };\n      }\n    }\n  }, {\n    key: \"_getClassStyle\",\n    value: function _getClassStyle(className, active) {\n      var _this$props2 = this.props,\n        cellBorderWidth = _this$props2.cellBorderWidth,\n        activeColor = _this$props2.activeColor,\n        inactiveColor = _this$props2.inactiveColor,\n        space = _this$props2.space;\n      var classStyle = _objectSpread(_objectSpread({}, this._getInputSpaceStyle(space)), {}, {\n        color: activeColor\n      });\n      switch (className) {\n        case 'clear':\n          return _.merge(classStyle, {\n            borderWidth: 0\n          });\n        case 'border-box':\n          return _.merge(classStyle, {\n            borderWidth: cellBorderWidth,\n            borderColor: active ? activeColor : inactiveColor\n          });\n        case 'border-circle':\n          return _.merge(classStyle, {\n            borderWidth: cellBorderWidth,\n            borderRadius: 50,\n            borderColor: active ? activeColor : inactiveColor\n          });\n        case 'border-b':\n          return _.merge(classStyle, {\n            borderBottomWidth: cellBorderWidth,\n            borderColor: active ? activeColor : inactiveColor\n          });\n        case 'border-b-t':\n          return _.merge(classStyle, {\n            borderTopWidth: cellBorderWidth,\n            borderBottomWidth: cellBorderWidth,\n            borderColor: active ? activeColor : inactiveColor\n          });\n        case 'border-l-r':\n          return _.merge(classStyle, {\n            borderLeftWidth: cellBorderWidth,\n            borderRightWidth: cellBorderWidth,\n            borderColor: active ? activeColor : inactiveColor\n          });\n        default:\n          return className;\n      }\n    }\n  }, {\n    key: \"_onKeyPress\",\n    value: function _onKeyPress(e) {\n      if (e.nativeEvent.key === 'Backspace') {\n        var currentIndex = this.state.currentIndex;\n        var nextIndex = currentIndex > 0 ? currentIndex - 1 : 0;\n        this._setFocus(nextIndex);\n      }\n    }\n  }, {\n    key: \"_onInputCode\",\n    value: function _onInputCode(character, index) {\n      var _this$props3 = this.props,\n        codeLength = _this$props3.codeLength,\n        onFulfill = _this$props3.onFulfill,\n        compareWithCode = _this$props3.compareWithCode,\n        ignoreCase = _this$props3.ignoreCase;\n      var newCodeArr = _.clone(this.state.codeArr);\n      newCodeArr[index] = character;\n      if (index == codeLength - 1) {\n        var code = newCodeArr.join('');\n        if (compareWithCode) {\n          var isMatching = this._isMatchingCode(code, compareWithCode, ignoreCase);\n          onFulfill(isMatching, code);\n          !isMatching && this.clear();\n        } else {\n          onFulfill(code);\n        }\n        this._blur(this.state.currentIndex);\n      } else {\n        this._setFocus(this.state.currentIndex + 1);\n      }\n      this.setState(function (prevState) {\n        return {\n          codeArr: newCodeArr,\n          currentIndex: prevState.currentIndex + 1\n        };\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n      var _this$props4 = this.props,\n        codeLength = _this$props4.codeLength,\n        codeInputStyle = _this$props4.codeInputStyle,\n        containerStyle = _this$props4.containerStyle,\n        inputPosition = _this$props4.inputPosition,\n        autoFocus = _this$props4.autoFocus,\n        className = _this$props4.className,\n        size = _this$props4.size,\n        activeColor = _this$props4.activeColor;\n      var initialCodeInputStyle = {\n        width: size,\n        height: size\n      };\n      var codeInputs = [];\n      var _loop = function _loop() {\n        var id = i;\n        codeInputs.push(_jsx(TextInput, _objectSpread(_objectSpread({\n          ref: function ref(_ref) {\n            return _this2.codeInputRefs[id] = _ref;\n          },\n          style: [styles.codeInput, initialCodeInputStyle, _this2._getClassStyle(className, _this2.state.currentIndex == id), codeInputStyle],\n          underlineColorAndroid: \"transparent\",\n          selectionColor: activeColor,\n          keyboardType: 'name-phone-pad',\n          returnKeyType: 'done'\n        }, _this2.props), {}, {\n          autoFocus: autoFocus && id == 0,\n          onFocus: function onFocus() {\n            return _this2._onFocus(id);\n          },\n          value: _this2.state.codeArr[id] ? _this2.state.codeArr[id].toString() : '',\n          onChangeText: function onChangeText(text) {\n            return _this2._onInputCode(text, id);\n          },\n          onKeyPress: function onKeyPress(e) {\n            return _this2._onKeyPress(e);\n          },\n          maxLength: 1\n        }), id));\n      };\n      for (var i = 0; i < codeLength; i++) {\n        _loop();\n      }\n      return _jsx(View, {\n        style: [styles.container, this._getContainerStyle(size, inputPosition), containerStyle],\n        children: codeInputs\n      });\n    }\n  }]);\n  return ConfirmationCodeInput;\n}(Component);\nConfirmationCodeInput.propTypes = {\n  codeLength: PropTypes.number,\n  compareWithCode: PropTypes.string,\n  inputPosition: PropTypes.string,\n  size: PropTypes.number,\n  space: PropTypes.number,\n  className: PropTypes.string,\n  cellBorderWidth: PropTypes.number,\n  activeColor: PropTypes.string,\n  inactiveColor: PropTypes.string,\n  ignoreCase: PropTypes.bool,\n  autoFocus: PropTypes.bool,\n  codeInputStyle: TextInput.propTypes.style,\n  containerStyle: viewPropTypes.style,\n  onFulfill: PropTypes.func\n};\nConfirmationCodeInput.defaultProps = {\n  codeLength: 5,\n  inputPosition: 'center',\n  autoFocus: true,\n  size: 40,\n  className: 'border-box',\n  cellBorderWidth: 1,\n  activeColor: 'rgba(255, 255, 255, 1)',\n  inactiveColor: 'rgba(255, 255, 255, 0.2)',\n  space: 8,\n  compareWithCode: '',\n  ignoreCase: false\n};\nexport { ConfirmationCodeInput as default };\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    flexDirection: 'row',\n    marginTop: 20\n  },\n  codeInput: {\n    backgroundColor: 'transparent',\n    textAlign: 'center',\n    padding: 0\n  }\n});","map":{"version":3,"names":["React","Component","PropTypes","View","TextInput","StyleSheet","Dimensions","ViewPropTypes","_","jsx","_jsx","viewPropTypes","propTypes","ConfirmationCodeInput","_Component","_inherits","props","_this","_classCallCheck","_callSuper","state","codeArr","Array","codeLength","fill","currentIndex","codeInputRefs","_createClass","key","value","componentDidMount","_this$props","compareWithCode","inputPosition","length","console","error","indexOf","clear","setState","_setFocus","index","focus","_blur","blur","_onFocus","newCodeArr","clone","currentEmptyIndex","findIndex","c","i","_isMatchingCode","code","ignoreCase","arguments","undefined","toLowerCase","_getContainerStyle","size","position","justifyContent","height","_getInputSpaceStyle","space","marginRight","marginLeft","_getClassStyle","className","active","_this$props2","cellBorderWidth","activeColor","inactiveColor","classStyle","_objectSpread","color","merge","borderWidth","borderColor","borderRadius","borderBottomWidth","borderTopWidth","borderLeftWidth","borderRightWidth","_onKeyPress","e","nativeEvent","nextIndex","_onInputCode","character","_this$props3","onFulfill","join","isMatching","prevState","render","_this2","_this$props4","codeInputStyle","containerStyle","autoFocus","initialCodeInputStyle","width","codeInputs","_loop","id","push","ref","style","styles","codeInput","underlineColorAndroid","selectionColor","keyboardType","returnKeyType","onFocus","toString","onChangeText","text","onKeyPress","maxLength","container","children","number","string","bool","func","defaultProps","default","create","flex","flexDirection","marginTop","backgroundColor","textAlign","padding"],"sources":["C:/Users/Lucas/Desktop/Projetos/Istudy/node_modules/react-native-confirmation-code-input/components/ConfirmationCodeInput.js"],"sourcesContent":["import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\nimport { View, TextInput, StyleSheet, Dimensions, ViewPropTypes } from 'react-native';\nimport _ from 'lodash';\n\n// if ViewPropTypes is not defined fall back to View.propType (to support RN < 0.44)\nconst viewPropTypes = ViewPropTypes || View.propTypes;\n\nexport default class ConfirmationCodeInput extends Component {\n  static propTypes = {\n    codeLength: PropTypes.number,\n    compareWithCode: PropTypes.string,\n    inputPosition: PropTypes.string,\n    size: PropTypes.number,\n    space: PropTypes.number,\n    className: PropTypes.string,\n    cellBorderWidth: PropTypes.number,\n    activeColor: PropTypes.string,\n    inactiveColor: PropTypes.string,\n    ignoreCase: PropTypes.bool,\n    autoFocus: PropTypes.bool,\n    codeInputStyle: TextInput.propTypes.style,\n    containerStyle: viewPropTypes.style,\n    onFulfill: PropTypes.func,\n  };\n  \n  static defaultProps = {\n    codeLength: 5,\n    inputPosition: 'center',\n    autoFocus: true,\n    size: 40,\n    className: 'border-box',\n    cellBorderWidth: 1,\n    activeColor: 'rgba(255, 255, 255, 1)',\n    inactiveColor: 'rgba(255, 255, 255, 0.2)',\n    space: 8,\n    compareWithCode: '',\n    ignoreCase: false\n  };\n  \n  constructor(props) {\n    super(props);\n    \n    this.state = {\n      codeArr: new Array(this.props.codeLength).fill(''),\n      currentIndex: 0\n    };\n    \n    this.codeInputRefs = [];\n  }\n  \n  componentDidMount() {\n    const { compareWithCode, codeLength, inputPosition } = this.props;\n    if (compareWithCode && compareWithCode.length !== codeLength) {\n      console.error(\"Invalid props: compareWith length is not equal to codeLength\");\n    }\n    \n    if (_.indexOf(['center', 'left', 'right', 'full-width'], inputPosition) === -1) {\n      console.error('Invalid input position. Must be in: center, left, right, full');\n    }\n  }\n  \n  clear() {\n    this.setState({\n      codeArr: new Array(this.props.codeLength).fill(''),\n      currentIndex: 0\n    });\n    this._setFocus(0);\n  }\n  \n  _setFocus(index) {\n    this.codeInputRefs[index].focus();\n  }\n  \n  _blur(index) {\n    this.codeInputRefs[index].blur();\n  }\n  \n  _onFocus(index) {\n    let newCodeArr = _.clone(this.state.codeArr);\n    const currentEmptyIndex = _.findIndex(newCodeArr, c => !c);\n    if (currentEmptyIndex !== -1 && currentEmptyIndex < index) {\n      return this._setFocus(currentEmptyIndex);\n    }\n    for (const i in newCodeArr) {\n      if (i >= index) {\n        newCodeArr[i] = '';\n      }\n    }\n    \n    this.setState({\n      codeArr: newCodeArr,\n      currentIndex: index\n    })\n  }\n  \n  _isMatchingCode(code, compareWithCode, ignoreCase = false) {\n    if (ignoreCase) {\n      return code.toLowerCase() == compareWithCode.toLowerCase();\n    }\n    return code == compareWithCode;\n  }\n  \n  _getContainerStyle(size, position) {\n    switch (position) {\n      case 'left':\n        return {\n          justifyContent: 'flex-start',\n          height: size\n        };\n      case 'center':\n        return {\n          justifyContent: 'center',\n          height: size\n        };\n      case 'right':\n        return {\n          justifyContent: 'flex-end',\n          height: size\n        };\n      default:\n        return {\n          justifyContent: 'space-between',\n          height: size\n        }\n    }\n  }\n  \n  _getInputSpaceStyle(space) {\n    const { inputPosition } = this.props;\n    switch (inputPosition) {\n      case 'left':\n        return {\n          marginRight: space\n        };\n      case 'center':\n        return {\n          marginRight: space/2,\n          marginLeft: space/2\n        };\n      case 'right':\n        return {\n          marginLeft: space\n        };\n      default:\n        return {\n          marginRight: 0,\n          marginLeft: 0\n        };\n    }\n  }\n  \n  _getClassStyle(className, active) {\n    const { cellBorderWidth, activeColor, inactiveColor, space } = this.props;\n    let classStyle = {\n      ...this._getInputSpaceStyle(space),\n      color: activeColor\n    };\n    \n    switch (className) {\n      case 'clear':\n        return _.merge(classStyle, { borderWidth: 0 });\n      case 'border-box':\n        return _.merge(classStyle, {\n          borderWidth: cellBorderWidth,\n          borderColor: (active ? activeColor : inactiveColor)\n        });\n      case 'border-circle':\n        return _.merge(classStyle, {\n          borderWidth: cellBorderWidth,\n          borderRadius: 50,\n          borderColor: (active ? activeColor : inactiveColor)\n        });\n      case 'border-b':\n        return _.merge(classStyle, {\n          borderBottomWidth: cellBorderWidth,\n          borderColor: (active ? activeColor : inactiveColor),\n        });\n      case 'border-b-t':\n        return _.merge(classStyle, {\n          borderTopWidth: cellBorderWidth,\n          borderBottomWidth: cellBorderWidth,\n          borderColor: (active ? activeColor : inactiveColor)\n        });\n      case 'border-l-r':\n        return _.merge(classStyle, {\n          borderLeftWidth: cellBorderWidth,\n          borderRightWidth: cellBorderWidth,\n          borderColor: (active ? activeColor : inactiveColor)\n        });\n      default:\n        return className;\n    }\n  }\n  \n  _onKeyPress(e) {\n    if (e.nativeEvent.key === 'Backspace') {\n      const { currentIndex } = this.state;\n      const nextIndex = currentIndex > 0 ? currentIndex - 1 : 0;\n      this._setFocus(nextIndex);\n    }\n  }\n  \n  _onInputCode(character, index) {\n    const { codeLength, onFulfill, compareWithCode, ignoreCase } = this.props;\n    let newCodeArr = _.clone(this.state.codeArr);\n    newCodeArr[index] = character;\n    \n    if (index == codeLength - 1) {\n      const code = newCodeArr.join('');\n      \n      if (compareWithCode) {\n        const isMatching = this._isMatchingCode(code, compareWithCode, ignoreCase);\n        onFulfill(isMatching, code);\n        !isMatching && this.clear();\n      } else {\n        onFulfill(code);\n      }\n      this._blur(this.state.currentIndex);\n    } else {\n      this._setFocus(this.state.currentIndex + 1);\n    }\n    \n    this.setState(prevState => {\n      return {\n        codeArr: newCodeArr,\n        currentIndex: prevState.currentIndex + 1\n      };\n    });\n  }\n  \n  render() {\n    const {\n      codeLength,\n      codeInputStyle,\n      containerStyle,\n      inputPosition,\n      autoFocus,\n      className,\n      size,\n      activeColor\n    } = this.props;\n    \n    const initialCodeInputStyle = {\n      width: size,\n      height: size\n    };\n    \n    let codeInputs = [];\n    for (let i = 0; i < codeLength; i++) {\n      const id = i;\n      codeInputs.push(\n        <TextInput\n          key={id}\n          ref={ref => (this.codeInputRefs[id] = ref)}\n          style={[\n            styles.codeInput, \n            initialCodeInputStyle, \n            this._getClassStyle(className, this.state.currentIndex == id),\n            codeInputStyle\n          ]}\n          underlineColorAndroid=\"transparent\"\n          selectionColor={activeColor}\n          keyboardType={'name-phone-pad'}\n          returnKeyType={'done'}\n          {...this.props}\n          autoFocus={autoFocus && id == 0}\n          onFocus={() => this._onFocus(id)}\n          value={this.state.codeArr[id] ? this.state.codeArr[id].toString() : ''}\n          onChangeText={text => this._onInputCode(text, id)}\n          onKeyPress={(e) => this._onKeyPress(e)}\n          maxLength={1}\n        />\n      )\n    }\n    \n    return (\n      <View style={[styles.container, this._getContainerStyle(size, inputPosition), containerStyle]}>\n        {codeInputs}\n      </View>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    flexDirection: 'row',\n    marginTop: 20\n  },\n  codeInput: {\n    backgroundColor: 'transparent',\n    textAlign: 'center',\n    padding: 0\n  }\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}