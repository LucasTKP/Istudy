{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nvar _excluded = [\"url\"];\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nimport * as WebBrowser from 'expo-web-browser';\nimport invariant from 'invariant';\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport { CodeChallengeMethod, ResponseType } from \"./AuthRequest.types\";\nimport { AuthError } from \"./Errors\";\nimport * as PKCE from \"./PKCE\";\nimport * as QueryParams from \"./QueryParams\";\nimport { TokenResponse } from \"./TokenRequest\";\nvar _authLock = false;\nexport var AuthRequest = function () {\n  function AuthRequest(request) {\n    var _request$responseType, _request$state, _request$extraParams, _request$codeChalleng, _request$usePKCE;\n    _classCallCheck(this, AuthRequest);\n    this.url = null;\n    this.responseType = (_request$responseType = request.responseType) != null ? _request$responseType : ResponseType.Code;\n    this.clientId = request.clientId;\n    this.redirectUri = request.redirectUri;\n    this.scopes = request.scopes;\n    this.clientSecret = request.clientSecret;\n    this.prompt = request.prompt;\n    this.state = (_request$state = request.state) != null ? _request$state : PKCE.generateRandom(10);\n    this.extraParams = (_request$extraParams = request.extraParams) != null ? _request$extraParams : {};\n    this.codeChallengeMethod = (_request$codeChalleng = request.codeChallengeMethod) != null ? _request$codeChalleng : CodeChallengeMethod.S256;\n    this.usePKCE = (_request$usePKCE = request.usePKCE) != null ? _request$usePKCE : true;\n    if (__DEV__) {\n      if (this.prompt && this.extraParams.prompt) {\n        console.warn(`\\`AuthRequest\\` \\`extraParams.prompt\\` will be overwritten by \\`prompt\\`.`);\n      }\n      if (this.clientSecret && this.extraParams.client_secret) {\n        console.warn(`\\`AuthRequest\\` \\`extraParams.client_secret\\` will be overwritten by \\`clientSecret\\`.`);\n      }\n      if (this.codeChallengeMethod && this.extraParams.code_challenge_method) {\n        console.warn(`\\`AuthRequest\\` \\`extraParams.code_challenge_method\\` will be overwritten by \\`codeChallengeMethod\\`.`);\n      }\n    }\n    invariant(this.codeChallengeMethod !== CodeChallengeMethod.Plain, `\\`AuthRequest\\` does not support \\`CodeChallengeMethod.Plain\\` as it's not secure.`);\n    invariant(this.redirectUri, `\\`AuthRequest\\` requires a valid \\`redirectUri\\`. Ex: ${Platform.select({\n      web: 'https://yourwebsite.com/',\n      default: 'com.your.app:/oauthredirect'\n    })}`);\n  }\n  _createClass(AuthRequest, [{\n    key: \"getAuthRequestConfigAsync\",\n    value: (function () {\n      var _getAuthRequestConfigAsync = _asyncToGenerator(function* () {\n        if (this.usePKCE) {\n          yield this.ensureCodeIsSetupAsync();\n        }\n        return {\n          responseType: this.responseType,\n          clientId: this.clientId,\n          redirectUri: this.redirectUri,\n          scopes: this.scopes,\n          clientSecret: this.clientSecret,\n          codeChallenge: this.codeChallenge,\n          codeChallengeMethod: this.codeChallengeMethod,\n          prompt: this.prompt,\n          state: this.state,\n          extraParams: this.extraParams,\n          usePKCE: this.usePKCE\n        };\n      });\n      function getAuthRequestConfigAsync() {\n        return _getAuthRequestConfigAsync.apply(this, arguments);\n      }\n      return getAuthRequestConfigAsync;\n    }())\n  }, {\n    key: \"promptAsync\",\n    value: (function () {\n      var _promptAsync = _asyncToGenerator(function* (discovery) {\n        var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n        var url = _ref.url,\n          options = _objectWithoutProperties(_ref, _excluded);\n        if (!url) {\n          if (!this.url) {\n            return this.promptAsync(discovery, _objectSpread(_objectSpread({}, options), {}, {\n              url: yield this.makeAuthUrlAsync(discovery)\n            }));\n          }\n          url = this.url;\n        }\n        invariant(url, 'No authUrl provided to AuthSession.startAsync. An authUrl is required -- it points to the page where the user will be able to sign in.');\n        var startUrl = url;\n        var returnUrl = this.redirectUri;\n        if (_authLock) {\n          if (__DEV__) {\n            console.warn('Attempted to call AuthSession.startAsync multiple times while already active. Only one AuthSession can be active at any given time.');\n          }\n          return {\n            type: 'locked'\n          };\n        }\n        _authLock = true;\n        var result;\n        try {\n          result = yield WebBrowser.openAuthSessionAsync(startUrl, returnUrl, options);\n        } finally {\n          _authLock = false;\n        }\n        if (result.type === 'opened') {\n          throw new Error('An unexpected error occurred');\n        }\n        if (result.type !== 'success') {\n          return {\n            type: result.type\n          };\n        }\n        return this.parseReturnUrl(result.url);\n      });\n      function promptAsync(_x) {\n        return _promptAsync.apply(this, arguments);\n      }\n      return promptAsync;\n    }())\n  }, {\n    key: \"parseReturnUrl\",\n    value: function parseReturnUrl(url) {\n      var _QueryParams$getQuery = QueryParams.getQueryParams(url),\n        params = _QueryParams$getQuery.params,\n        errorCode = _QueryParams$getQuery.errorCode;\n      var state = params.state,\n        _params$error = params.error,\n        error = _params$error === void 0 ? errorCode : _params$error;\n      var parsedError = null;\n      var authentication = null;\n      if (state !== this.state) {\n        parsedError = new AuthError({\n          error: 'state_mismatch',\n          error_description: 'Cross-Site request verification failed. Cached state and returned state do not match.'\n        });\n      } else if (error) {\n        parsedError = new AuthError(_objectSpread({\n          error: error\n        }, params));\n      }\n      if (params.access_token) {\n        authentication = TokenResponse.fromQueryParams(params);\n      }\n      return {\n        type: parsedError ? 'error' : 'success',\n        error: parsedError,\n        url: url,\n        params: params,\n        authentication: authentication,\n        errorCode: errorCode\n      };\n    }\n  }, {\n    key: \"makeAuthUrlAsync\",\n    value: (function () {\n      var _makeAuthUrlAsync = _asyncToGenerator(function* (discovery) {\n        var _request$scopes;\n        var request = yield this.getAuthRequestConfigAsync();\n        if (!request.state) throw new Error('Cannot make request URL without a valid `state` loaded');\n        var params = {};\n        if (request.codeChallenge) {\n          params.code_challenge = request.codeChallenge;\n        }\n        for (var extra in request.extraParams) {\n          if (extra in request.extraParams) {\n            params[extra] = request.extraParams[extra];\n          }\n        }\n        if (request.usePKCE && request.codeChallengeMethod) {\n          params.code_challenge_method = request.codeChallengeMethod;\n        }\n        if (request.clientSecret) {\n          params.client_secret = request.clientSecret;\n        }\n        if (request.prompt) {\n          params.prompt = request.prompt;\n        }\n        params.redirect_uri = request.redirectUri;\n        params.client_id = request.clientId;\n        params.response_type = request.responseType;\n        params.state = request.state;\n        if ((_request$scopes = request.scopes) != null && _request$scopes.length) {\n          params.scope = request.scopes.join(' ');\n        }\n        var query = QueryParams.buildQueryString(params);\n        this.url = `${discovery.authorizationEndpoint}?${query}`;\n        return this.url;\n      });\n      function makeAuthUrlAsync(_x2) {\n        return _makeAuthUrlAsync.apply(this, arguments);\n      }\n      return makeAuthUrlAsync;\n    }())\n  }, {\n    key: \"ensureCodeIsSetupAsync\",\n    value: function () {\n      var _ensureCodeIsSetupAsync = _asyncToGenerator(function* () {\n        if (this.codeVerifier) {\n          return;\n        }\n        var _yield$PKCE$buildCode = yield PKCE.buildCodeAsync(),\n          codeVerifier = _yield$PKCE$buildCode.codeVerifier,\n          codeChallenge = _yield$PKCE$buildCode.codeChallenge;\n        this.codeVerifier = codeVerifier;\n        this.codeChallenge = codeChallenge;\n      });\n      function ensureCodeIsSetupAsync() {\n        return _ensureCodeIsSetupAsync.apply(this, arguments);\n      }\n      return ensureCodeIsSetupAsync;\n    }()\n  }]);\n  return AuthRequest;\n}();","map":{"version":3,"names":["WebBrowser","invariant","Platform","CodeChallengeMethod","ResponseType","AuthError","PKCE","QueryParams","TokenResponse","_authLock","AuthRequest","request","_request$responseType","_request$state","_request$extraParams","_request$codeChalleng","_request$usePKCE","_classCallCheck","url","responseType","Code","clientId","redirectUri","scopes","clientSecret","prompt","state","generateRandom","extraParams","codeChallengeMethod","S256","usePKCE","__DEV__","console","warn","client_secret","code_challenge_method","Plain","select","web","default","_createClass","key","value","_getAuthRequestConfigAsync","_asyncToGenerator","ensureCodeIsSetupAsync","codeChallenge","getAuthRequestConfigAsync","apply","arguments","_promptAsync","discovery","_ref","length","undefined","options","_objectWithoutProperties","_excluded","promptAsync","_objectSpread","makeAuthUrlAsync","startUrl","returnUrl","type","result","openAuthSessionAsync","Error","parseReturnUrl","_x","_QueryParams$getQuery","getQueryParams","params","errorCode","_params$error","error","parsedError","authentication","error_description","access_token","fromQueryParams","_makeAuthUrlAsync","_request$scopes","code_challenge","extra","redirect_uri","client_id","response_type","scope","join","query","buildQueryString","authorizationEndpoint","_x2","_ensureCodeIsSetupAsync","codeVerifier","_yield$PKCE$buildCode","buildCodeAsync"],"sources":["C:\\Users\\Lucas\\Desktop\\Projetos\\Istudy\\node_modules\\expo-auth-session\\src\\AuthRequest.ts"],"sourcesContent":["import * as WebBrowser from 'expo-web-browser';\nimport invariant from 'invariant';\nimport { Platform } from 'react-native';\n\nimport {\n  AuthRequestConfig,\n  AuthRequestPromptOptions,\n  CodeChallengeMethod,\n  ResponseType,\n  Prompt,\n} from './AuthRequest.types';\nimport { AuthSessionResult } from './AuthSession.types';\nimport { DiscoveryDocument } from './Discovery';\nimport { AuthError } from './Errors';\nimport * as PKCE from './PKCE';\nimport * as QueryParams from './QueryParams';\nimport { TokenResponse } from './TokenRequest';\n\nlet _authLock: boolean = false;\n\ntype AuthDiscoveryDocument = Pick<DiscoveryDocument, 'authorizationEndpoint'>;\n\n// @needsAudit @docsMissing\n/**\n * Used to manage an authorization request according to the OAuth spec: [Section 4.1.1](https://tools.ietf.org/html/rfc6749#section-4.1.1).\n * You can use this class directly for more info around the authorization.\n *\n * **Common use-cases:**\n *\n * - Parse a URL returned from the authorization server with `parseReturnUrlAsync()`.\n * - Get the built authorization URL with `makeAuthUrlAsync()`.\n * - Get a loaded JSON representation of the auth request with crypto state loaded with `getAuthRequestConfigAsync()`.\n *\n * @example\n * ```ts\n * // Create a request.\n * const request = new AuthRequest({ ... });\n *\n * // Prompt for an auth code\n * const result = await request.promptAsync(discovery);\n *\n * // Get the URL to invoke\n * const url = await request.makeAuthUrlAsync(discovery);\n *\n * // Get the URL to invoke\n * const parsed = await request.parseReturnUrlAsync(\"<URL From Server>\");\n * ```\n */\nexport class AuthRequest implements Omit<AuthRequestConfig, 'state'> {\n  /**\n   * Used for protection against [Cross-Site Request Forgery](https://tools.ietf.org/html/rfc6749#section-10.12).\n   */\n  public state: string;\n  public url: string | null = null;\n  public codeVerifier?: string;\n  public codeChallenge?: string;\n\n  readonly responseType: ResponseType | string;\n  readonly clientId: string;\n  readonly extraParams: Record<string, string>;\n  readonly usePKCE?: boolean;\n  readonly codeChallengeMethod: CodeChallengeMethod;\n  readonly redirectUri: string;\n  readonly scopes?: string[];\n  readonly clientSecret?: string;\n  readonly prompt?: Prompt;\n\n  constructor(request: AuthRequestConfig) {\n    this.responseType = request.responseType ?? ResponseType.Code;\n    this.clientId = request.clientId;\n    this.redirectUri = request.redirectUri;\n    this.scopes = request.scopes;\n    this.clientSecret = request.clientSecret;\n    this.prompt = request.prompt;\n    this.state = request.state ?? PKCE.generateRandom(10);\n    this.extraParams = request.extraParams ?? {};\n    this.codeChallengeMethod = request.codeChallengeMethod ?? CodeChallengeMethod.S256;\n    // PKCE defaults to true\n    this.usePKCE = request.usePKCE ?? true;\n\n    // Some warnings in development about potential confusing application code\n    if (__DEV__) {\n      if (this.prompt && this.extraParams.prompt) {\n        console.warn(`\\`AuthRequest\\` \\`extraParams.prompt\\` will be overwritten by \\`prompt\\`.`);\n      }\n      if (this.clientSecret && this.extraParams.client_secret) {\n        console.warn(\n          `\\`AuthRequest\\` \\`extraParams.client_secret\\` will be overwritten by \\`clientSecret\\`.`\n        );\n      }\n      if (this.codeChallengeMethod && this.extraParams.code_challenge_method) {\n        console.warn(\n          `\\`AuthRequest\\` \\`extraParams.code_challenge_method\\` will be overwritten by \\`codeChallengeMethod\\`.`\n        );\n      }\n    }\n\n    invariant(\n      this.codeChallengeMethod !== CodeChallengeMethod.Plain,\n      `\\`AuthRequest\\` does not support \\`CodeChallengeMethod.Plain\\` as it's not secure.`\n    );\n    invariant(\n      this.redirectUri,\n      `\\`AuthRequest\\` requires a valid \\`redirectUri\\`. Ex: ${Platform.select({\n        web: 'https://yourwebsite.com/',\n        default: 'com.your.app:/oauthredirect',\n      })}`\n    );\n  }\n\n  /**\n   * Load and return a valid auth request based on the input config.\n   */\n  async getAuthRequestConfigAsync(): Promise<AuthRequestConfig> {\n    if (this.usePKCE) {\n      await this.ensureCodeIsSetupAsync();\n    }\n\n    return {\n      responseType: this.responseType,\n      clientId: this.clientId,\n      redirectUri: this.redirectUri,\n      scopes: this.scopes,\n      clientSecret: this.clientSecret,\n      codeChallenge: this.codeChallenge,\n      codeChallengeMethod: this.codeChallengeMethod,\n      prompt: this.prompt,\n      state: this.state,\n      extraParams: this.extraParams,\n      usePKCE: this.usePKCE,\n    };\n  }\n\n  /**\n   * Prompt a user to authorize for a code.\n   *\n   * @param discovery\n   * @param promptOptions\n   */\n  async promptAsync(\n    discovery: AuthDiscoveryDocument,\n    { url, ...options }: AuthRequestPromptOptions = {}\n  ): Promise<AuthSessionResult> {\n    if (!url) {\n      if (!this.url) {\n        // Generate a new url\n        return this.promptAsync(discovery, {\n          ...options,\n          url: await this.makeAuthUrlAsync(discovery),\n        });\n      }\n      // Reuse the preloaded url\n      url = this.url;\n    }\n\n    // Prevent accidentally starting to an empty url\n    invariant(\n      url,\n      'No authUrl provided to AuthSession.startAsync. An authUrl is required -- it points to the page where the user will be able to sign in.'\n    );\n\n    const startUrl: string = url!;\n    const returnUrl: string = this.redirectUri;\n\n    // Prevent multiple sessions from running at the same time, WebBrowser doesn't\n    // support it this makes the behavior predictable.\n    if (_authLock) {\n      if (__DEV__) {\n        console.warn(\n          'Attempted to call AuthSession.startAsync multiple times while already active. Only one AuthSession can be active at any given time.'\n        );\n      }\n\n      return { type: 'locked' };\n    }\n\n    // About to start session, set lock\n    _authLock = true;\n\n    let result: WebBrowser.WebBrowserAuthSessionResult;\n    try {\n      result = await WebBrowser.openAuthSessionAsync(startUrl, returnUrl, options);\n    } finally {\n      _authLock = false;\n    }\n\n    if (result.type === 'opened') {\n      // This should never happen\n      throw new Error('An unexpected error occurred');\n    }\n    if (result.type !== 'success') {\n      return { type: result.type };\n    }\n\n    return this.parseReturnUrl(result.url);\n  }\n\n  parseReturnUrl(url: string): AuthSessionResult {\n    const { params, errorCode } = QueryParams.getQueryParams(url);\n    const { state, error = errorCode } = params;\n\n    let parsedError: AuthError | null = null;\n    let authentication: TokenResponse | null = null;\n    if (state !== this.state) {\n      // This is a non-standard error\n      parsedError = new AuthError({\n        error: 'state_mismatch',\n        error_description:\n          'Cross-Site request verification failed. Cached state and returned state do not match.',\n      });\n    } else if (error) {\n      parsedError = new AuthError({ error, ...params });\n    }\n    if (params.access_token) {\n      authentication = TokenResponse.fromQueryParams(params);\n    }\n\n    return {\n      type: parsedError ? 'error' : 'success',\n      error: parsedError,\n      url,\n      params,\n      authentication,\n\n      // Return errorCode for legacy\n      errorCode,\n    };\n  }\n\n  /**\n   * Create the URL for authorization.\n   *\n   * @param discovery\n   */\n  async makeAuthUrlAsync(discovery: AuthDiscoveryDocument): Promise<string> {\n    const request = await this.getAuthRequestConfigAsync();\n    if (!request.state) throw new Error('Cannot make request URL without a valid `state` loaded');\n\n    // Create a query string\n    const params: Record<string, string> = {};\n\n    if (request.codeChallenge) {\n      params.code_challenge = request.codeChallenge;\n    }\n\n    // copy over extra params\n    for (const extra in request.extraParams) {\n      if (extra in request.extraParams) {\n        params[extra] = request.extraParams[extra];\n      }\n    }\n\n    if (request.usePKCE && request.codeChallengeMethod) {\n      params.code_challenge_method = request.codeChallengeMethod;\n    }\n\n    if (request.clientSecret) {\n      params.client_secret = request.clientSecret;\n    }\n\n    if (request.prompt) {\n      params.prompt = request.prompt;\n    }\n\n    // These overwrite any extra params\n    params.redirect_uri = request.redirectUri;\n    params.client_id = request.clientId;\n    params.response_type = request.responseType!;\n    params.state = request.state;\n\n    if (request.scopes?.length) {\n      params.scope = request.scopes.join(' ');\n    }\n\n    const query = QueryParams.buildQueryString(params);\n    // Store the URL for later\n    this.url = `${discovery.authorizationEndpoint}?${query}`;\n    return this.url;\n  }\n\n  private async ensureCodeIsSetupAsync(): Promise<void> {\n    if (this.codeVerifier) {\n      return;\n    }\n\n    // This method needs to be resolved like all other native methods.\n    const { codeVerifier, codeChallenge } = await PKCE.buildCodeAsync();\n\n    this.codeVerifier = codeVerifier;\n    this.codeChallenge = codeChallenge;\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}