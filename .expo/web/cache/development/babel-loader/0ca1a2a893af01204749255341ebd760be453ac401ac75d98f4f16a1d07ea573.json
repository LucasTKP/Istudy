{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _defineProperty2 from \"@babel/runtime/helpers/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _get from \"@babel/runtime/helpers/get\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nvar _excluded = [\"shouldCancelWhenOutside\", \"maxDeltaX\", \"maxDeltaY\", \"numberOfTaps\", \"minDurationMs\", \"maxDelayMs\", \"maxDurationMs\", \"maxDist\", \"minPointers\", \"maxPointers\"];\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }\nfunction _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nimport Hammer from '@egjs/hammerjs';\nimport DiscreteGestureHandler from \"./DiscreteGestureHandler\";\nimport { isnan } from \"./utils\";\nvar TapGestureHandler = function (_DiscreteGestureHandl) {\n  _inherits(TapGestureHandler, _DiscreteGestureHandl);\n  function TapGestureHandler() {\n    var _this;\n    _classCallCheck(this, TapGestureHandler);\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    _this = _callSuper(this, TapGestureHandler, [].concat(args));\n    _defineProperty(_assertThisInitialized(_this), \"_shouldFireEndEvent\", null);\n    _defineProperty(_assertThisInitialized(_this), \"_timer\", void 0);\n    _defineProperty(_assertThisInitialized(_this), \"_multiTapTimer\", void 0);\n    _defineProperty(_assertThisInitialized(_this), \"onSuccessfulTap\", function (ev) {\n      if (_this._getPendingGestures().length) {\n        _this._shouldFireEndEvent = ev;\n        return;\n      }\n      if (ev.eventType === Hammer.INPUT_END) {\n        _this.sendEvent(_objectSpread(_objectSpread({}, ev), {}, {\n          eventType: Hammer.INPUT_MOVE\n        }));\n      }\n      _this.sendEvent(_objectSpread(_objectSpread({}, ev), {}, {\n        isFinal: true\n      }));\n      _this.onGestureEnded(ev);\n    });\n    return _this;\n  }\n  _createClass(TapGestureHandler, [{\n    key: \"name\",\n    get: function get() {\n      return 'tap';\n    }\n  }, {\n    key: \"NativeGestureClass\",\n    get: function get() {\n      return Hammer.Tap;\n    }\n  }, {\n    key: \"maxDelayMs\",\n    get: function get() {\n      return isnan(this.config.maxDelayMs) ? 300 : this.config.maxDelayMs;\n    }\n  }, {\n    key: \"simulateCancelEvent\",\n    value: function simulateCancelEvent(inputData) {\n      if (this.isGestureRunning) {\n        this.cancelEvent(inputData);\n      }\n    }\n  }, {\n    key: \"onGestureActivated\",\n    value: function onGestureActivated(ev) {\n      if (this.isGestureRunning) {\n        this.onSuccessfulTap(ev);\n      }\n    }\n  }, {\n    key: \"onRawEvent\",\n    value: function onRawEvent(ev) {\n      var _this2 = this;\n      _get(_getPrototypeOf(TapGestureHandler.prototype), \"onRawEvent\", this).call(this, ev);\n      if (!this.hasGestureFailed && !this.isGestureRunning && !ev.isFinal) {\n        var gesture = this.hammer.get(this.name);\n        if (gesture.options.enable(gesture, ev)) {\n          clearTimeout(this._multiTapTimer);\n          this.onStart(ev);\n          this.sendEvent(ev);\n        }\n      }\n      if (ev.isFinal && ev.maxPointers > 1) {\n        setTimeout(function () {\n          if (_this2.isGestureRunning) {\n            _this2.cancelEvent(ev);\n          }\n        });\n      }\n      if (this.hasGestureFailed) {\n        return;\n      }\n      if (ev.isFinal) {\n        if (ev.maxPointers > 1) {\n          setTimeout(function () {\n            if (_this2.isGestureRunning) {\n              _this2.cancelEvent(ev);\n            }\n          });\n        }\n        clearTimeout(this._timer);\n        this._timer = setTimeout(function () {\n          _this2.hasGestureFailed = true;\n          _this2.cancelEvent(ev);\n        }, this.maxDelayMs);\n      } else if (!this.hasGestureFailed && !this.isGestureRunning) {\n        var _gesture2 = this.hammer.get(this.name);\n        if (_gesture2.options.enable(_gesture2, ev)) {\n          clearTimeout(this._multiTapTimer);\n          this.onStart(ev);\n          this.sendEvent(ev);\n        }\n      }\n    }\n  }, {\n    key: \"getHammerConfig\",\n    value: function getHammerConfig() {\n      return _objectSpread(_objectSpread({}, _get(_getPrototypeOf(TapGestureHandler.prototype), \"getHammerConfig\", this).call(this)), {}, {\n        event: this.name,\n        taps: isnan(this.config.numberOfTaps) ? 1 : this.config.numberOfTaps,\n        interval: this.maxDelayMs,\n        time: isnan(this.config.maxDurationMs) || this.config.maxDurationMs == null ? 250 : this.config.maxDurationMs\n      });\n    }\n  }, {\n    key: \"updateGestureConfig\",\n    value: function updateGestureConfig(_ref) {\n      var _ref$shouldCancelWhen = _ref.shouldCancelWhenOutside,\n        shouldCancelWhenOutside = _ref$shouldCancelWhen === void 0 ? true : _ref$shouldCancelWhen,\n        _ref$maxDeltaX = _ref.maxDeltaX,\n        maxDeltaX = _ref$maxDeltaX === void 0 ? Number.NaN : _ref$maxDeltaX,\n        _ref$maxDeltaY = _ref.maxDeltaY,\n        maxDeltaY = _ref$maxDeltaY === void 0 ? Number.NaN : _ref$maxDeltaY,\n        _ref$numberOfTaps = _ref.numberOfTaps,\n        numberOfTaps = _ref$numberOfTaps === void 0 ? 1 : _ref$numberOfTaps,\n        _ref$minDurationMs = _ref.minDurationMs,\n        minDurationMs = _ref$minDurationMs === void 0 ? 525 : _ref$minDurationMs,\n        _ref$maxDelayMs = _ref.maxDelayMs,\n        maxDelayMs = _ref$maxDelayMs === void 0 ? Number.NaN : _ref$maxDelayMs,\n        _ref$maxDurationMs = _ref.maxDurationMs,\n        maxDurationMs = _ref$maxDurationMs === void 0 ? Number.NaN : _ref$maxDurationMs,\n        _ref$maxDist = _ref.maxDist,\n        maxDist = _ref$maxDist === void 0 ? 2 : _ref$maxDist,\n        _ref$minPointers = _ref.minPointers,\n        minPointers = _ref$minPointers === void 0 ? 1 : _ref$minPointers,\n        _ref$maxPointers = _ref.maxPointers,\n        maxPointers = _ref$maxPointers === void 0 ? 1 : _ref$maxPointers,\n        props = _objectWithoutProperties(_ref, _excluded);\n      return _get(_getPrototypeOf(TapGestureHandler.prototype), \"updateGestureConfig\", this).call(this, _objectSpread({\n        shouldCancelWhenOutside: shouldCancelWhenOutside,\n        numberOfTaps: numberOfTaps,\n        maxDeltaX: maxDeltaX,\n        maxDeltaY: maxDeltaY,\n        minDurationMs: minDurationMs,\n        maxDelayMs: maxDelayMs,\n        maxDist: maxDist,\n        minPointers: minPointers,\n        maxPointers: maxPointers\n      }, props));\n    }\n  }, {\n    key: \"onGestureEnded\",\n    value: function onGestureEnded() {\n      var _get2;\n      clearTimeout(this._timer);\n      for (var _len2 = arguments.length, props = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        props[_key2] = arguments[_key2];\n      }\n      (_get2 = _get(_getPrototypeOf(TapGestureHandler.prototype), \"onGestureEnded\", this)).call.apply(_get2, [this].concat(props));\n    }\n  }, {\n    key: \"onWaitingEnded\",\n    value: function onWaitingEnded(_gesture) {\n      if (this._shouldFireEndEvent) {\n        this.onSuccessfulTap(this._shouldFireEndEvent);\n        this._shouldFireEndEvent = null;\n      }\n    }\n  }]);\n  return TapGestureHandler;\n}(DiscreteGestureHandler);\nexport default TapGestureHandler;","map":{"version":3,"names":["Hammer","DiscreteGestureHandler","isnan","TapGestureHandler","_DiscreteGestureHandl","_inherits","_this","_classCallCheck","_len","arguments","length","args","Array","_key","_callSuper","concat","_defineProperty","_assertThisInitialized","ev","_getPendingGestures","_shouldFireEndEvent","eventType","INPUT_END","sendEvent","_objectSpread","INPUT_MOVE","isFinal","onGestureEnded","_createClass","key","get","Tap","config","maxDelayMs","value","simulateCancelEvent","inputData","isGestureRunning","cancelEvent","onGestureActivated","onSuccessfulTap","onRawEvent","_this2","_get","_getPrototypeOf","prototype","call","hasGestureFailed","gesture","hammer","name","options","enable","clearTimeout","_multiTapTimer","onStart","maxPointers","setTimeout","_timer","getHammerConfig","event","taps","numberOfTaps","interval","time","maxDurationMs","updateGestureConfig","_ref","_ref$shouldCancelWhen","shouldCancelWhenOutside","_ref$maxDeltaX","maxDeltaX","Number","NaN","_ref$maxDeltaY","maxDeltaY","_ref$numberOfTaps","_ref$minDurationMs","minDurationMs","_ref$maxDelayMs","_ref$maxDurationMs","_ref$maxDist","maxDist","_ref$minPointers","minPointers","_ref$maxPointers","props","_objectWithoutProperties","_excluded","_get2","_len2","_key2","apply","onWaitingEnded","_gesture"],"sources":["C:\\Users\\Lucas\\Desktop\\Projetos\\Istudy\\node_modules\\react-native-gesture-handler\\lib\\module\\web_hammer\\TapGestureHandler.ts"],"sourcesContent":["import Hammer from '@egjs/hammerjs';\n\nimport DiscreteGestureHandler from './DiscreteGestureHandler';\nimport { HammerInputExt } from './GestureHandler';\nimport { isnan } from './utils';\n\nclass TapGestureHandler extends DiscreteGestureHandler {\n  private _shouldFireEndEvent: HammerInputExt | null = null;\n  private _timer: any;\n  private _multiTapTimer: any; // TODO unused?\n  get name() {\n    return 'tap';\n  }\n\n  get NativeGestureClass() {\n    return Hammer.Tap;\n  }\n\n  get maxDelayMs() {\n    // @ts-ignore TODO(TS) trace down config\n    return isnan(this.config.maxDelayMs) ? 300 : this.config.maxDelayMs;\n  }\n\n  simulateCancelEvent(inputData: HammerInputExt) {\n    if (this.isGestureRunning) {\n      this.cancelEvent(inputData);\n    }\n  }\n\n  onGestureActivated(ev: HammerInputExt) {\n    if (this.isGestureRunning) {\n      this.onSuccessfulTap(ev);\n    }\n  }\n\n  onSuccessfulTap = (ev: HammerInputExt) => {\n    if (this._getPendingGestures().length) {\n      this._shouldFireEndEvent = ev;\n      return;\n    }\n    if (ev.eventType === Hammer.INPUT_END) {\n      this.sendEvent({ ...ev, eventType: Hammer.INPUT_MOVE });\n    }\n    // When handler gets activated it will turn into State.END immediately.\n    this.sendEvent({ ...ev, isFinal: true });\n    this.onGestureEnded(ev);\n  };\n\n  onRawEvent(ev: HammerInput) {\n    super.onRawEvent(ev);\n\n    // Attempt to create a touch-down event by checking if a valid tap hasn't started yet, then validating the input.\n    if (\n      !this.hasGestureFailed &&\n      !this.isGestureRunning &&\n      // Prevent multi-pointer events from misfiring.\n      !ev.isFinal\n    ) {\n      // Tap Gesture start event\n      const gesture = this.hammer!.get(this.name);\n      // @ts-ignore TODO(TS) trace down config\n      if (gesture.options.enable(gesture, ev)) {\n        clearTimeout(this._multiTapTimer);\n\n        this.onStart(ev);\n        this.sendEvent(ev);\n      }\n    }\n    if (ev.isFinal && ev.maxPointers > 1) {\n      setTimeout(() => {\n        // Handle case where one finger presses slightly\n        // after the first finger on a multi-tap event\n        if (this.isGestureRunning) {\n          this.cancelEvent(ev);\n        }\n      });\n    }\n\n    if (this.hasGestureFailed) {\n      return;\n    }\n    // Hammer doesn't send a `cancel` event for taps.\n    // Manually fail the event.\n    if (ev.isFinal) {\n      // Handle case where one finger presses slightly\n      // after the first finger on a multi-tap event\n      if (ev.maxPointers > 1) {\n        setTimeout(() => {\n          if (this.isGestureRunning) {\n            this.cancelEvent(ev);\n          }\n        });\n      }\n\n      // Clear last timer\n      clearTimeout(this._timer);\n      // Create time out for multi-taps.\n      this._timer = setTimeout(() => {\n        this.hasGestureFailed = true;\n        this.cancelEvent(ev);\n      }, this.maxDelayMs);\n    } else if (!this.hasGestureFailed && !this.isGestureRunning) {\n      // Tap Gesture start event\n      const gesture = this.hammer!.get(this.name);\n      // @ts-ignore TODO(TS) trace down config\n      if (gesture.options.enable(gesture, ev)) {\n        clearTimeout(this._multiTapTimer);\n\n        this.onStart(ev);\n        this.sendEvent(ev);\n      }\n    }\n  }\n\n  getHammerConfig() {\n    return {\n      ...super.getHammerConfig(),\n      event: this.name,\n      // @ts-ignore TODO(TS) trace down config\n      taps: isnan(this.config.numberOfTaps) ? 1 : this.config.numberOfTaps,\n      interval: this.maxDelayMs,\n      time:\n        // @ts-ignore TODO(TS) trace down config\n        isnan(this.config.maxDurationMs) || this.config.maxDurationMs == null\n          ? 250\n          : // @ts-ignore TODO(TS) trace down config\n            this.config.maxDurationMs,\n    };\n  }\n\n  updateGestureConfig({\n    shouldCancelWhenOutside = true,\n    maxDeltaX = Number.NaN,\n    maxDeltaY = Number.NaN,\n    numberOfTaps = 1,\n    minDurationMs = 525,\n    maxDelayMs = Number.NaN,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars -- TODO possibly forgotten to use in updateGestureConfig?\n    maxDurationMs = Number.NaN,\n    maxDist = 2,\n    minPointers = 1,\n    maxPointers = 1,\n    ...props\n  }) {\n    return super.updateGestureConfig({\n      shouldCancelWhenOutside,\n      numberOfTaps,\n      maxDeltaX,\n      maxDeltaY,\n      minDurationMs,\n      maxDelayMs,\n      maxDist,\n      minPointers,\n      maxPointers,\n      ...props,\n    });\n  }\n\n  onGestureEnded(...props: any) {\n    clearTimeout(this._timer);\n    // @ts-ignore TODO(TS) check how onGestureEnded works\n    super.onGestureEnded(...props);\n  }\n\n  onWaitingEnded(_gesture: any) {\n    if (this._shouldFireEndEvent) {\n      this.onSuccessfulTap(this._shouldFireEndEvent);\n      this._shouldFireEndEvent = null;\n    }\n  }\n}\nexport default TapGestureHandler;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAOA,MAAP,MAAmB,gBAAnB;AAEA,OAAOC,sBAAP;AAEA,SAASC,KAAT;AAAA,IAEMC,iBAAN,aAAAC,qBAAA;EAAAC,SAAA,CAAAF,iBAAA,EAAAC,qBAAA;EAAuD,SAAAD,kBAAA;IAAA,IAAAG,KAAA;IAAAC,eAAA,OAAAJ,iBAAA;IAAA,SAAAK,IAAA,GAAAC,SAAA,CAAAC,MAAA,EAAAC,IAAA,OAAAC,KAAA,CAAAJ,IAAA,GAAAK,IAAA,MAAAA,IAAA,GAAAL,IAAA,EAAAK,IAAA;MAAAF,IAAA,CAAAE,IAAA,IAAAJ,SAAA,CAAAI,IAAA;IAAA;IAAAP,KAAA,GAAAQ,UAAA,OAAAX,iBAAA,KAAAY,MAAA,CAAAJ,IAAA;IAAAK,eAAA,CAAAC,sBAAA,CAAAX,KAAA,0BACA,IADA;IAAAU,eAAA,CAAAC,sBAAA,CAAAX,KAAA;IAAAU,eAAA,CAAAC,sBAAA,CAAAX,KAAA;IAAAU,eAAA,CAAAC,sBAAA,CAAAX,KAAA,sBA6BlC,UAAAY,EAAD,EAAwB;MACxC,IAAIZ,KAAA,CAAKa,mBAAL,GAA2BT,MAA/B,EAAuC;QACrCJ,KAAA,CAAKc,mBAAL,GAA2BF,EAA3B;QACA;MACD;MACD,IAAIA,EAAE,CAACG,SAAH,KAAiBrB,MAAM,CAACsB,SAA5B,EAAuC;QACrChB,KAAA,CAAKiB,SAAL,CAAAC,aAAA,CAAAA,aAAA,KAAoBN,EAAL;UAASG,SAAS,EAAErB,MAAM,CAACyB;QAAA,EAA1C;MACD;MAEDnB,KAAA,CAAKiB,SAAL,CAAAC,aAAA,CAAAA,aAAA,KAAoBN,EAAL;QAASQ,OAAO,EAAE;MAAA,EAAjC;MACApB,KAAA,CAAKqB,cAAL,CAAoBT,EAApB;IACD,CAxCoD;IAAA,OAAAZ,KAAA;EAAA;EAAAsB,YAAA,CAAAzB,iBAAA;IAAA0B,GAAA;IAAAC,GAAA,EAI7C,SAAAA,IAAA,EAAG;MACT,OAAO,KAAP;IACD;EAAA;IAAAD,GAAA;IAAAC,GAAA,EAEqB,SAAAA,IAAA,EAAG;MACvB,OAAO9B,MAAM,CAAC+B,GAAd;IACD;EAAA;IAAAF,GAAA;IAAAC,GAAA,EAEa,SAAAA,IAAA,EAAG;MAEf,OAAO5B,KAAK,CAAC,KAAK8B,MAAL,CAAYC,UAAb,CAAL,GAAgC,GAAhC,GAAsC,KAAKD,MAAL,CAAYC,UAAzD;IACD;EAAA;IAAAJ,GAAA;IAAAK,KAAA,EAED,SAAAC,oBAAoBC,SAAD,EAA4B;MAC7C,IAAI,KAAKC,gBAAT,EAA2B;QACzB,KAAKC,WAAL,CAAiBF,SAAjB;MACD;IACF;EAAA;IAAAP,GAAA;IAAAK,KAAA,EAED,SAAAK,mBAAmBrB,EAAD,EAAqB;MACrC,IAAI,KAAKmB,gBAAT,EAA2B;QACzB,KAAKG,eAAL,CAAqBtB,EAArB;MACD;IACF;EAAA;IAAAW,GAAA;IAAAK,KAAA,EAeD,SAAAO,WAAWvB,EAAD,EAAkB;MAAA,IAAAwB,MAAA;MAC1BC,IAAA,CAAAC,eAAA,CAAAzC,iBAAA,CAAA0C,SAAA,uBAAAC,IAAA,OAAiB5B,EAAjB;MAGA,IACE,CAAC,KAAK6B,gBAAN,IACA,CAAC,KAAKV,gBADN,IAGA,CAACnB,EAAE,CAACQ,OAJN,EAKE;QAEA,IAAMsB,OAAO,GAAG,KAAKC,MAAL,CAAanB,GAAb,CAAiB,KAAKoB,IAAtB,CAAhB;QAEA,IAAIF,OAAO,CAACG,OAAR,CAAgBC,MAAhB,CAAuBJ,OAAvB,EAAgC9B,EAAhC,CAAJ,EAAyC;UACvCmC,YAAY,CAAC,KAAKC,cAAN,CAAZ;UAEA,KAAKC,OAAL,CAAarC,EAAb;UACA,KAAKK,SAAL,CAAeL,EAAf;QACD;MACF;MACD,IAAIA,EAAE,CAACQ,OAAH,IAAcR,EAAE,CAACsC,WAAH,GAAiB,CAAnC,EAAsC;QACpCC,UAAU,CAAC,YAAM;UAGf,IAAIf,MAAA,CAAKL,gBAAT,EAA2B;YACzBK,MAAA,CAAKJ,WAAL,CAAiBpB,EAAjB;UACD;QACF,CANS,CAAV;MAOD;MAED,IAAI,KAAK6B,gBAAT,EAA2B;QACzB;MACD;MAGD,IAAI7B,EAAE,CAACQ,OAAP,EAAgB;QAGd,IAAIR,EAAE,CAACsC,WAAH,GAAiB,CAArB,EAAwB;UACtBC,UAAU,CAAC,YAAM;YACf,IAAIf,MAAA,CAAKL,gBAAT,EAA2B;cACzBK,MAAA,CAAKJ,WAAL,CAAiBpB,EAAjB;YACD;UACF,CAJS,CAAV;QAKD;QAGDmC,YAAY,CAAC,KAAKK,MAAN,CAAZ;QAEA,KAAKA,MAAL,GAAcD,UAAU,CAAC,YAAM;UAC7Bf,MAAA,CAAKK,gBAAL,GAAwB,IAAxB;UACAL,MAAA,CAAKJ,WAAL,CAAiBpB,EAAjB;QACD,CAHuB,EAGrB,KAAKe,UAHgB,CAAxB;MAID,CAlBD,MAkBO,IAAI,CAAC,KAAKc,gBAAN,IAA0B,CAAC,KAAKV,gBAApC,EAAsD;QAE3D,IAAMW,SAAO,GAAG,KAAKC,MAAL,CAAanB,GAAb,CAAiB,KAAKoB,IAAtB,CAAhB;QAEA,IAAIF,SAAO,CAACG,OAAR,CAAgBC,MAAhB,CAAuBJ,SAAvB,EAAgC9B,EAAhC,CAAJ,EAAyC;UACvCmC,YAAY,CAAC,KAAKC,cAAN,CAAZ;UAEA,KAAKC,OAAL,CAAarC,EAAb;UACA,KAAKK,SAAL,CAAeL,EAAf;QACD;MACF;IACF;EAAA;IAAAW,GAAA;IAAAK,KAAA,EAED,SAAAyB,gBAAA,EAAkB;MAChB,OAAAnC,aAAA,CAAAA,aAAA,KAAAmB,IAAA,CAAAC,eAAA,CAAAzC,iBAAA,CAAA0C,SAAA,4BAAAC,IAAA;QAEEc,KAAK,EAAE,KAAKV,IAFP;QAILW,IAAI,EAAE3D,KAAK,CAAC,KAAK8B,MAAL,CAAY8B,YAAb,CAAL,GAAkC,CAAlC,GAAsC,KAAK9B,MAAL,CAAY8B,YAJnD;QAKLC,QAAQ,EAAE,KAAK9B,UALV;QAML+B,IAAI,EAEF9D,KAAK,CAAC,KAAK8B,MAAL,CAAYiC,aAAb,CAAL,IAAoC,KAAKjC,MAAL,CAAYiC,aAAZ,IAA6B,IAAjE,GACI,GADJ,GAGI,KAAKjC,MAAL,CAAYiC;MAAA;IAErB;EAAA;IAAApC,GAAA;IAAAK,KAAA,EAED,SAAAgC,oBAAAC,IAAA,EAaG;MAAA,IAAAC,qBAAA,GAAAD,IAAA,CAZDE,uBAAuB;QAAvBA,uBAAuB,GAAAD,qBAAA,cAAG,IADR,GAAAA,qBAAA;QAAAE,cAAA,GAAAH,IAAA,CAElBI,SAAS;QAATA,SAAS,GAAAD,cAAA,cAAGE,MAAM,CAACC,GAFD,GAAAH,cAAA;QAAAI,cAAA,GAAAP,IAAA,CAGlBQ,SAAS;QAATA,SAAS,GAAAD,cAAA,cAAGF,MAAM,CAACC,GAHD,GAAAC,cAAA;QAAAE,iBAAA,GAAAT,IAAA,CAIlBL,YAAY;QAAZA,YAAY,GAAAc,iBAAA,cAAG,CAJG,GAAAA,iBAAA;QAAAC,kBAAA,GAAAV,IAAA,CAKlBW,aAAa;QAAbA,aAAa,GAAAD,kBAAA,cAAG,GALE,GAAAA,kBAAA;QAAAE,eAAA,GAAAZ,IAAA,CAMlBlC,UAAU;QAAVA,UAAU,GAAA8C,eAAA,cAAGP,MAAM,CAACC,GANF,GAAAM,eAAA;QAAAC,kBAAA,GAAAb,IAAA,CAQlBF,aAAa;QAAbA,aAAa,GAAAe,kBAAA,cAAGR,MAAM,CAACC,GARL,GAAAO,kBAAA;QAAAC,YAAA,GAAAd,IAAA,CASlBe,OAAO;QAAPA,OAAO,GAAAD,YAAA,cAAG,CATQ,GAAAA,YAAA;QAAAE,gBAAA,GAAAhB,IAAA,CAUlBiB,WAAW;QAAXA,WAAW,GAAAD,gBAAA,cAAG,CAVI,GAAAA,gBAAA;QAAAE,gBAAA,GAAAlB,IAAA,CAWlBX,WAAW;QAAXA,WAAW,GAAA6B,gBAAA,cAAG,CAXI,GAAAA,gBAAA;QAYfC,KAAA,GAAAC,wBAAA,CAAApB,IAAA,EAAAqB,SAAA;MAEH,OAAA7C,IAAA,CAAAC,eAAA,CAAAzC,iBAAA,CAAA0C,SAAA,gCAAAC,IAAA,OAAAtB,aAAA;QACE6C,uBAD+B,EAC/BA,uBAD+B;QAE/BP,YAF+B,EAE/BA,YAF+B;QAG/BS,SAH+B,EAG/BA,SAH+B;QAI/BI,SAJ+B,EAI/BA,SAJ+B;QAK/BG,aAL+B,EAK/BA,aAL+B;QAM/B7C,UAN+B,EAM/BA,UAN+B;QAO/BiD,OAP+B,EAO/BA,OAP+B;QAQ/BE,WAR+B,EAQ/BA,WAR+B;QAS/B5B,WAT+B,EAS/BA;MAT+B,GAU5B8B,KAAA;IAEN;EAAA;IAAAzD,GAAA;IAAAK,KAAA,EAED,SAAAP,eAAA,EAA8B;MAAA,IAAA8D,KAAA;MAC5BpC,YAAY,CAAC,KAAKK,MAAN,CAAZ;MAD4B,SAAAgC,KAAA,GAAAjF,SAAA,CAAAC,MAAA,EAAZ4E,KAAJ,OAAA1E,KAAA,CAAA8E,KAAA,GAAAC,KAAA,MAAAA,KAAA,GAAAD,KAAA,EAAAC,KAAA;QAAIL,KAAJ,CAAAK,KAAA,IAAAlF,SAAA,CAAAkF,KAAA;MAAA;MAGZ,CAAAF,KAAA,GAAA9C,IAAA,CAAAC,eAAA,CAAAzC,iBAAA,CAAA0C,SAAA,4BAAAC,IAAA,CAAA8C,KAAA,CAAAH,KAAA,SAAA1E,MAAA,CAAwBuE,KAAxB;IACD;EAAA;IAAAzD,GAAA;IAAAK,KAAA,EAED,SAAA2D,eAAeC,QAAD,EAAgB;MAC5B,IAAI,KAAK1E,mBAAT,EAA8B;QAC5B,KAAKoB,eAAL,CAAqB,KAAKpB,mBAA1B;QACA,KAAKA,mBAAL,GAA2B,IAA3B;MACD;IACF;EAAA;EAAA,OAAAjB,iBAAA;AAAA,EAnK6BF,sBAAhC;AAqKA,eAAeE,iBAAf"},"metadata":{},"sourceType":"module","externalDependencies":[]}