{"ast":null,"code":"import _createClass from \"@babel/runtime/helpers/createClass\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _wrapNativeSuper from \"@babel/runtime/helpers/wrapNativeSuper\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport { UnavailabilityError } from 'expo-modules-core';\nimport { CryptoDigestAlgorithm, CryptoEncoding } from \"./Crypto.types\";\nimport ExpoCrypto from \"./ExpoCrypto\";\nexport * from \"./Crypto.types\";\n\nvar CryptoError = function (_TypeError) {\n  _inherits(CryptoError, _TypeError);\n\n  var _super = _createSuper(CryptoError);\n\n  function CryptoError(message) {\n    var _this;\n\n    _classCallCheck(this, CryptoError);\n\n    _this = _super.call(this, \"expo-crypto: \" + message);\n    _this.code = 'ERR_CRYPTO';\n    return _this;\n  }\n\n  return _createClass(CryptoError);\n}(_wrapNativeSuper(TypeError));\n\nfunction assertAlgorithm(algorithm) {\n  if (!Object.values(CryptoDigestAlgorithm).includes(algorithm)) {\n    throw new CryptoError(\"Invalid algorithm provided. Expected one of: CryptoDigestAlgorithm.\" + Object.keys(CryptoDigestAlgorithm).join(', AlgCryptoDigestAlgorithmorithm.'));\n  }\n}\n\nfunction assertData(data) {\n  if (typeof data !== 'string') {\n    throw new CryptoError(\"Invalid data provided. Expected a string.\");\n  }\n}\n\nfunction assertEncoding(encoding) {\n  if (!Object.values(CryptoEncoding).includes(encoding)) {\n    throw new CryptoError(\"Invalid encoding provided. Expected one of: CryptoEncoding.\" + Object.keys(CryptoEncoding).join(', CryptoEncoding.'));\n  }\n}\n\nexport function digestStringAsync(algorithm, data) {\n  var options,\n      _args = arguments;\n  return _regeneratorRuntime.async(function digestStringAsync$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          options = _args.length > 2 && _args[2] !== undefined ? _args[2] : {\n            encoding: CryptoEncoding.HEX\n          };\n\n          if (ExpoCrypto.digestStringAsync) {\n            _context.next = 3;\n            break;\n          }\n\n          throw new UnavailabilityError('expo-crypto', 'digestStringAsync');\n\n        case 3:\n          assertAlgorithm(algorithm);\n          assertData(data);\n          assertEncoding(options.encoding);\n          _context.next = 8;\n          return _regeneratorRuntime.awrap(ExpoCrypto.digestStringAsync(algorithm, data, options));\n\n        case 8:\n          return _context.abrupt(\"return\", _context.sent);\n\n        case 9:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}","map":{"version":3,"sources":["../src/Crypto.ts"],"names":[],"mappings":";;;;;;;;;;;;AAAA,SAAS,mBAAT,QAAoC,mBAApC;AAEA,SAAS,qBAAT,EAAgC,cAAhC;AACA,OAAO,UAAP;AAEA;;IAEM,W;;;;;EAGJ,qBAAY,OAAZ,EAA2B;IAAA;;IAAA;;IACzB,4CAAsB,OAAtB;IADyB,MAF3B,IAE2B,GAFpB,YAEoB;IAAA;EAE1B;;;mBALuB,S;;AAQ1B,SAAS,eAAT,CAAyB,SAAzB,EAAyD;EACvD,IAAI,CAAC,MAAM,CAAC,MAAP,CAAc,qBAAd,EAAqC,QAArC,CAA8C,SAA9C,CAAL,EAA+D;IAC7D,MAAM,IAAI,WAAJ,yEACkE,MAAM,CAAC,IAAP,CACpE,qBADoE,EAEpE,IAFoE,CAE/D,mCAF+D,CADlE,CAAN;EAKD;AACF;;AAED,SAAS,UAAT,CAAoB,IAApB,EAAgC;EAC9B,IAAI,OAAO,IAAP,KAAgB,QAApB,EAA8B;IAC5B,MAAM,IAAI,WAAJ,6CAAN;EACD;AACF;;AAED,SAAS,cAAT,CAAwB,QAAxB,EAAgD;EAC9C,IAAI,CAAC,MAAM,CAAC,MAAP,CAAc,cAAd,EAA8B,QAA9B,CAAuC,QAAvC,CAAL,EAAuD;IACrD,MAAM,IAAI,WAAJ,iEAC0D,MAAM,CAAC,IAAP,CAC5D,cAD4D,EAE5D,IAF4D,CAEvD,mBAFuD,CAD1D,CAAN;EAKD;AACF;;AAuBD,OAAO,SAAe,iBAAf,CACL,SADK,EAEL,IAFK;EAAA;EAAA;EAAA;IAAA;MAAA;QAAA;UAGL,OAHK,2DAG0B;YAAE,QAAQ,EAAE,cAAc,CAAC;UAA3B,CAH1B;;UAAA,IAKA,UAAU,CAAC,iBALX;YAAA;YAAA;UAAA;;UAAA,MAMG,IAAI,mBAAJ,CAAwB,aAAxB,EAAuC,mBAAvC,CANH;;QAAA;UASL,eAAe,CAAC,SAAD,CAAf;UACA,UAAU,CAAC,IAAD,CAAV;UACA,cAAc,CAAC,OAAO,CAAC,QAAT,CAAd;UAXK;UAAA,iCAaQ,UAAU,CAAC,iBAAX,CAA6B,SAA7B,EAAwC,IAAxC,EAA8C,OAA9C,CAbR;;QAAA;UAAA;;QAAA;QAAA;UAAA;MAAA;IAAA;EAAA;AAAA","sourcesContent":["import { UnavailabilityError } from 'expo-modules-core';\n\nimport { CryptoDigestAlgorithm, CryptoEncoding, CryptoDigestOptions, Digest } from './Crypto.types';\nimport ExpoCrypto from './ExpoCrypto';\n\nexport * from './Crypto.types';\n\nclass CryptoError extends TypeError {\n  code = 'ERR_CRYPTO';\n\n  constructor(message: string) {\n    super(`expo-crypto: ${message}`);\n  }\n}\n\nfunction assertAlgorithm(algorithm: CryptoDigestAlgorithm): void {\n  if (!Object.values(CryptoDigestAlgorithm).includes(algorithm)) {\n    throw new CryptoError(\n      `Invalid algorithm provided. Expected one of: CryptoDigestAlgorithm.${Object.keys(\n        CryptoDigestAlgorithm\n      ).join(', AlgCryptoDigestAlgorithmorithm.')}`\n    );\n  }\n}\n\nfunction assertData(data: string): void {\n  if (typeof data !== 'string') {\n    throw new CryptoError(`Invalid data provided. Expected a string.`);\n  }\n}\n\nfunction assertEncoding(encoding: CryptoEncoding): void {\n  if (!Object.values(CryptoEncoding).includes(encoding)) {\n    throw new CryptoError(\n      `Invalid encoding provided. Expected one of: CryptoEncoding.${Object.keys(\n        CryptoEncoding\n      ).join(', CryptoEncoding.')}`\n    );\n  }\n}\n\n// @needsAudit\n/**\n * The `digestStringAsync()` method of `Crypto` generates a digest of the supplied `data` string with the provided digest `algorithm`.\n * A digest is a short fixed-length value derived from some variable-length input. **Cryptographic digests** should exhibit _collision-resistance_,\n * meaning that it's very difficult to generate multiple inputs that have equal digest values.\n * You can specify the returned string format as one of `CryptoEncoding`. By default, the resolved value will be formatted as a `HEX` string.\n * On web, this method can only be called from a secure origin (https) otherwise an error will be thrown.\n *\n * @param algorithm The cryptographic hash function to use to transform a block of data into a fixed-size output.\n * @param data The value that will be used to generate a digest.\n * @param options Format of the digest string. Defaults to: `CryptoDigestOptions.HEX`.\n * @return Return a Promise which fulfills with a value representing the hashed input.\n *\n * @example\n * ```ts\n * const digest = await Crypto.digestStringAsync(\n *   Crypto.CryptoDigestAlgorithm.SHA512,\n *   'ðŸ¥“ Easy to Digest! ðŸ’™'\n * );\n * ```\n */\nexport async function digestStringAsync(\n  algorithm: CryptoDigestAlgorithm,\n  data: string,\n  options: CryptoDigestOptions = { encoding: CryptoEncoding.HEX }\n): Promise<Digest> {\n  if (!ExpoCrypto.digestStringAsync) {\n    throw new UnavailabilityError('expo-crypto', 'digestStringAsync');\n  }\n\n  assertAlgorithm(algorithm);\n  assertData(data);\n  assertEncoding(options.encoding);\n\n  return await ExpoCrypto.digestStringAsync(algorithm, data, options);\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}