{"ast":null,"code":"import _get from \"@babel/runtime/helpers/get\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport invariant from 'invariant';\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport * as Base64 from \"./Base64\";\nimport { TokenError } from \"./Errors\";\nimport { requestAsync } from \"./Fetch\";\nimport { GrantType } from \"./TokenRequest.types\";\nexport function getCurrentTimeInSeconds() {\n  return Math.floor(Date.now() / 1000);\n}\nexport var TokenResponse = function () {\n  function TokenResponse(response) {\n    var _response$tokenType, _response$issuedAt;\n\n    _classCallCheck(this, TokenResponse);\n\n    this.accessToken = response.accessToken;\n    this.tokenType = (_response$tokenType = response.tokenType) != null ? _response$tokenType : 'bearer';\n    this.expiresIn = response.expiresIn;\n    this.refreshToken = response.refreshToken;\n    this.scope = response.scope;\n    this.state = response.state;\n    this.idToken = response.idToken;\n    this.issuedAt = (_response$issuedAt = response.issuedAt) != null ? _response$issuedAt : getCurrentTimeInSeconds();\n  }\n\n  _createClass(TokenResponse, [{\n    key: \"applyResponseConfig\",\n    value: function applyResponseConfig(response) {\n      var _response$accessToken, _ref, _response$tokenType2, _response$expiresIn, _response$refreshToke, _response$scope, _response$state, _response$idToken, _ref2, _response$issuedAt2;\n\n      this.accessToken = (_response$accessToken = response.accessToken) != null ? _response$accessToken : this.accessToken;\n      this.tokenType = (_ref = (_response$tokenType2 = response.tokenType) != null ? _response$tokenType2 : this.tokenType) != null ? _ref : 'bearer';\n      this.expiresIn = (_response$expiresIn = response.expiresIn) != null ? _response$expiresIn : this.expiresIn;\n      this.refreshToken = (_response$refreshToke = response.refreshToken) != null ? _response$refreshToke : this.refreshToken;\n      this.scope = (_response$scope = response.scope) != null ? _response$scope : this.scope;\n      this.state = (_response$state = response.state) != null ? _response$state : this.state;\n      this.idToken = (_response$idToken = response.idToken) != null ? _response$idToken : this.idToken;\n      this.issuedAt = (_ref2 = (_response$issuedAt2 = response.issuedAt) != null ? _response$issuedAt2 : this.issuedAt) != null ? _ref2 : getCurrentTimeInSeconds();\n    }\n  }, {\n    key: \"getRequestConfig\",\n    value: function getRequestConfig() {\n      return {\n        accessToken: this.accessToken,\n        idToken: this.idToken,\n        refreshToken: this.refreshToken,\n        scope: this.scope,\n        state: this.state,\n        tokenType: this.tokenType,\n        issuedAt: this.issuedAt,\n        expiresIn: this.expiresIn\n      };\n    }\n  }, {\n    key: \"refreshAsync\",\n    value: function refreshAsync(config, discovery) {\n      var _response$refreshToke2;\n\n      var request, response, json;\n      return _regeneratorRuntime.async(function refreshAsync$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              request = new RefreshTokenRequest(_objectSpread(_objectSpread({}, config), {}, {\n                refreshToken: this.refreshToken\n              }));\n              _context.next = 3;\n              return _regeneratorRuntime.awrap(request.performAsync(discovery));\n\n            case 3:\n              response = _context.sent;\n              response.refreshToken = (_response$refreshToke2 = response.refreshToken) != null ? _response$refreshToke2 : this.refreshToken;\n              json = response.getRequestConfig();\n              this.applyResponseConfig(json);\n              return _context.abrupt(\"return\", this);\n\n            case 8:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"shouldRefresh\",\n    value: function shouldRefresh() {\n      return !(TokenResponse.isTokenFresh(this) || !this.refreshToken);\n    }\n  }], [{\n    key: \"isTokenFresh\",\n    value: function isTokenFresh(token) {\n      var secondsMargin = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 60 * 10 * -1;\n\n      if (!token) {\n        return false;\n      }\n\n      if (token.expiresIn) {\n        var now = getCurrentTimeInSeconds();\n        return now < token.issuedAt + token.expiresIn + secondsMargin;\n      }\n\n      return true;\n    }\n  }, {\n    key: \"fromQueryParams\",\n    value: function fromQueryParams(params) {\n      return new TokenResponse({\n        accessToken: params.access_token,\n        refreshToken: params.refresh_token,\n        scope: params.scope,\n        state: params.state,\n        idToken: params.id_token,\n        tokenType: params.token_type,\n        expiresIn: params.expires_in,\n        issuedAt: params.issued_at\n      });\n    }\n  }]);\n\n  return TokenResponse;\n}();\n\nvar Request = function () {\n  function Request(request) {\n    _classCallCheck(this, Request);\n\n    this.request = request;\n  }\n\n  _createClass(Request, [{\n    key: \"performAsync\",\n    value: function performAsync(discovery) {\n      return _regeneratorRuntime.async(function performAsync$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              throw new Error('performAsync must be extended');\n\n            case 1:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }\n  }, {\n    key: \"getRequestConfig\",\n    value: function getRequestConfig() {\n      throw new Error('getRequestConfig must be extended');\n    }\n  }, {\n    key: \"getQueryBody\",\n    value: function getQueryBody() {\n      throw new Error('getQueryBody must be extended');\n    }\n  }]);\n\n  return Request;\n}();\n\nvar TokenRequest = function (_Request) {\n  _inherits(TokenRequest, _Request);\n\n  var _super = _createSuper(TokenRequest);\n\n  function TokenRequest(request, grantType) {\n    var _this;\n\n    _classCallCheck(this, TokenRequest);\n\n    _this = _super.call(this, request);\n    _this.grantType = grantType;\n    _this.clientId = request.clientId;\n    _this.clientSecret = request.clientSecret;\n    _this.extraParams = request.extraParams;\n    _this.scopes = request.scopes;\n    return _this;\n  }\n\n  _createClass(TokenRequest, [{\n    key: \"getHeaders\",\n    value: function getHeaders() {\n      var headers = {\n        'Content-Type': 'application/x-www-form-urlencoded'\n      };\n\n      if (typeof this.clientSecret !== 'undefined') {\n        var encodedClientId = encodeURIComponent(this.clientId);\n        var encodedClientSecret = encodeURIComponent(this.clientSecret);\n        var credentials = encodedClientId + \":\" + encodedClientSecret;\n        var basicAuth = Base64.encodeNoWrap(credentials);\n        headers.Authorization = \"Basic \" + basicAuth;\n      }\n\n      return headers;\n    }\n  }, {\n    key: \"performAsync\",\n    value: function performAsync(discovery) {\n      var response;\n      return _regeneratorRuntime.async(function performAsync$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              invariant(discovery.tokenEndpoint, \"Cannot invoke `performAsync()` without a valid tokenEndpoint\");\n              _context3.next = 3;\n              return _regeneratorRuntime.awrap(requestAsync(discovery.tokenEndpoint, {\n                dataType: 'json',\n                method: 'POST',\n                headers: this.getHeaders(),\n                body: this.getQueryBody()\n              }));\n\n            case 3:\n              response = _context3.sent;\n\n              if (!('error' in response)) {\n                _context3.next = 6;\n                break;\n              }\n\n              throw new TokenError(response);\n\n            case 6:\n              return _context3.abrupt(\"return\", new TokenResponse({\n                accessToken: response.access_token,\n                tokenType: response.token_type,\n                expiresIn: response.expires_in,\n                refreshToken: response.refresh_token,\n                scope: response.scope,\n                idToken: response.id_token,\n                issuedAt: response.issued_at\n              }));\n\n            case 7:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"getQueryBody\",\n    value: function getQueryBody() {\n      var queryBody = {\n        grant_type: this.grantType\n      };\n\n      if (!this.clientSecret) {\n        queryBody.client_id = this.clientId;\n      }\n\n      if (this.scopes) {\n        queryBody.scope = this.scopes.join(' ');\n      }\n\n      if (this.extraParams) {\n        for (var extra in this.extraParams) {\n          if (extra in this.extraParams && !(extra in queryBody)) {\n            queryBody[extra] = this.extraParams[extra];\n          }\n        }\n      }\n\n      return queryBody;\n    }\n  }]);\n\n  return TokenRequest;\n}(Request);\n\nexport var AccessTokenRequest = function (_TokenRequest) {\n  _inherits(AccessTokenRequest, _TokenRequest);\n\n  var _super2 = _createSuper(AccessTokenRequest);\n\n  function AccessTokenRequest(options) {\n    var _this2;\n\n    _classCallCheck(this, AccessTokenRequest);\n\n    invariant(options.redirectUri, \"`AccessTokenRequest` requires a valid `redirectUri` (it must also match the one used in the auth request). Example: \" + Platform.select({\n      web: 'https://yourwebsite.com/redirect',\n      default: 'myapp://redirect'\n    }));\n    invariant(options.code, \"`AccessTokenRequest` requires a valid authorization `code`. This is what's received from the authorization server after an auth request.\");\n    _this2 = _super2.call(this, options, GrantType.AuthorizationCode);\n    _this2.code = options.code;\n    _this2.redirectUri = options.redirectUri;\n    return _this2;\n  }\n\n  _createClass(AccessTokenRequest, [{\n    key: \"getQueryBody\",\n    value: function getQueryBody() {\n      var queryBody = _get(_getPrototypeOf(AccessTokenRequest.prototype), \"getQueryBody\", this).call(this);\n\n      if (this.redirectUri) {\n        queryBody.redirect_uri = this.redirectUri;\n      }\n\n      if (this.code) {\n        queryBody.code = this.code;\n      }\n\n      return queryBody;\n    }\n  }, {\n    key: \"getRequestConfig\",\n    value: function getRequestConfig() {\n      return {\n        clientId: this.clientId,\n        clientSecret: this.clientSecret,\n        grantType: this.grantType,\n        code: this.code,\n        redirectUri: this.redirectUri,\n        extraParams: this.extraParams,\n        scopes: this.scopes\n      };\n    }\n  }]);\n\n  return AccessTokenRequest;\n}(TokenRequest);\nexport var RefreshTokenRequest = function (_TokenRequest2) {\n  _inherits(RefreshTokenRequest, _TokenRequest2);\n\n  var _super3 = _createSuper(RefreshTokenRequest);\n\n  function RefreshTokenRequest(options) {\n    var _this3;\n\n    _classCallCheck(this, RefreshTokenRequest);\n\n    invariant(options.refreshToken, \"`RefreshTokenRequest` requires a valid `refreshToken`.\");\n    _this3 = _super3.call(this, options, GrantType.RefreshToken);\n    _this3.refreshToken = options.refreshToken;\n    return _this3;\n  }\n\n  _createClass(RefreshTokenRequest, [{\n    key: \"getQueryBody\",\n    value: function getQueryBody() {\n      var queryBody = _get(_getPrototypeOf(RefreshTokenRequest.prototype), \"getQueryBody\", this).call(this);\n\n      if (this.refreshToken) {\n        queryBody.refresh_token = this.refreshToken;\n      }\n\n      return queryBody;\n    }\n  }, {\n    key: \"getRequestConfig\",\n    value: function getRequestConfig() {\n      return {\n        clientId: this.clientId,\n        clientSecret: this.clientSecret,\n        grantType: this.grantType,\n        refreshToken: this.refreshToken,\n        extraParams: this.extraParams,\n        scopes: this.scopes\n      };\n    }\n  }]);\n\n  return RefreshTokenRequest;\n}(TokenRequest);\nexport var RevokeTokenRequest = function (_Request2) {\n  _inherits(RevokeTokenRequest, _Request2);\n\n  var _super4 = _createSuper(RevokeTokenRequest);\n\n  function RevokeTokenRequest(request) {\n    var _this4;\n\n    _classCallCheck(this, RevokeTokenRequest);\n\n    _this4 = _super4.call(this, request);\n    invariant(request.token, \"`RevokeTokenRequest` requires a valid `token` to revoke.\");\n    _this4.clientId = request.clientId;\n    _this4.clientSecret = request.clientSecret;\n    _this4.token = request.token;\n    _this4.tokenTypeHint = request.tokenTypeHint;\n    return _this4;\n  }\n\n  _createClass(RevokeTokenRequest, [{\n    key: \"getHeaders\",\n    value: function getHeaders() {\n      var headers = {\n        'Content-Type': 'application/x-www-form-urlencoded'\n      };\n\n      if (typeof this.clientSecret !== 'undefined' && this.clientId) {\n        var encodedClientId = encodeURIComponent(this.clientId);\n        var encodedClientSecret = encodeURIComponent(this.clientSecret);\n        var credentials = encodedClientId + \":\" + encodedClientSecret;\n        var basicAuth = Base64.encodeNoWrap(credentials);\n        headers.Authorization = \"Basic \" + basicAuth;\n      }\n\n      return headers;\n    }\n  }, {\n    key: \"performAsync\",\n    value: function performAsync(discovery) {\n      return _regeneratorRuntime.async(function performAsync$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              invariant(discovery.revocationEndpoint, \"Cannot invoke `performAsync()` without a valid revocationEndpoint\");\n              _context4.next = 3;\n              return _regeneratorRuntime.awrap(requestAsync(discovery.revocationEndpoint, {\n                method: 'POST',\n                headers: this.getHeaders(),\n                body: this.getQueryBody()\n              }));\n\n            case 3:\n              return _context4.abrupt(\"return\", true);\n\n            case 4:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"getRequestConfig\",\n    value: function getRequestConfig() {\n      return {\n        clientId: this.clientId,\n        clientSecret: this.clientSecret,\n        token: this.token,\n        tokenTypeHint: this.tokenTypeHint\n      };\n    }\n  }, {\n    key: \"getQueryBody\",\n    value: function getQueryBody() {\n      var queryBody = {\n        token: this.token\n      };\n\n      if (this.tokenTypeHint) {\n        queryBody.token_type_hint = this.tokenTypeHint;\n      }\n\n      if (this.clientId) {\n        queryBody.client_id = this.clientId;\n      }\n\n      if (this.clientSecret) {\n        queryBody.client_secret = this.clientSecret;\n      }\n\n      return queryBody;\n    }\n  }]);\n\n  return RevokeTokenRequest;\n}(Request);\nexport function exchangeCodeAsync(config, discovery) {\n  var request = new AccessTokenRequest(config);\n  return request.performAsync(discovery);\n}\nexport function refreshAsync(config, discovery) {\n  var request = new RefreshTokenRequest(config);\n  return request.performAsync(discovery);\n}\nexport function revokeAsync(config, discovery) {\n  var request = new RevokeTokenRequest(config);\n  return request.performAsync(discovery);\n}\nexport function fetchUserInfoAsync(config, discovery) {\n  if (!discovery.userInfoEndpoint) {\n    throw new Error('User info endpoint is not defined in the service config discovery document');\n  }\n\n  return requestAsync(discovery.userInfoEndpoint, {\n    headers: {\n      'Content-Type': 'application/x-www-form-urlencoded',\n      Authorization: \"Bearer \" + config.accessToken\n    },\n    dataType: 'json',\n    method: 'GET'\n  });\n}","map":{"version":3,"sources":["../src/TokenRequest.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;AAAA,OAAO,SAAP,MAAsB,WAAtB;;AAGA,OAAO,KAAK,MAAZ;AAEA,SAA8B,UAA9B;AACA,SAAkB,YAAlB;AACA,SAEE,SAFF;AAeA,OAAM,SAAU,uBAAV,GAAiC;EACrC,OAAO,IAAI,CAAC,KAAL,CAAW,IAAI,CAAC,GAAL,KAAa,IAAxB,CAAP;AACD;AAOD,WAAa,aAAb;EAmDE,uBAAY,QAAZ,EAAyC;IAAA;;IAAA;;IACvC,KAAK,WAAL,GAAmB,QAAQ,CAAC,WAA5B;IACA,KAAK,SAAL,0BAAiB,QAAQ,CAAC,SAA1B,kCAAuC,QAAvC;IACA,KAAK,SAAL,GAAiB,QAAQ,CAAC,SAA1B;IACA,KAAK,YAAL,GAAoB,QAAQ,CAAC,YAA7B;IACA,KAAK,KAAL,GAAa,QAAQ,CAAC,KAAtB;IACA,KAAK,KAAL,GAAa,QAAQ,CAAC,KAAtB;IACA,KAAK,OAAL,GAAe,QAAQ,CAAC,OAAxB;IACA,KAAK,QAAL,yBAAgB,QAAQ,CAAC,QAAzB,iCAAqC,uBAAuB,EAA5D;EACD;;EA5DH;IAAA;IAAA,OA8DU,6BAAoB,QAApB,EAAiD;MAAA;;MACvD,KAAK,WAAL,4BAAmB,QAAQ,CAAC,WAA5B,oCAA2C,KAAK,WAAhD;MACA,KAAK,SAAL,mCAAiB,QAAQ,CAAC,SAA1B,mCAAuC,KAAK,SAA5C,mBAAyD,QAAzD;MACA,KAAK,SAAL,0BAAiB,QAAQ,CAAC,SAA1B,kCAAuC,KAAK,SAA5C;MACA,KAAK,YAAL,4BAAoB,QAAQ,CAAC,YAA7B,oCAA6C,KAAK,YAAlD;MACA,KAAK,KAAL,sBAAa,QAAQ,CAAC,KAAtB,8BAA+B,KAAK,KAApC;MACA,KAAK,KAAL,sBAAa,QAAQ,CAAC,KAAtB,8BAA+B,KAAK,KAApC;MACA,KAAK,OAAL,wBAAe,QAAQ,CAAC,OAAxB,gCAAmC,KAAK,OAAxC;MACA,KAAK,QAAL,mCAAgB,QAAQ,CAAC,QAAzB,kCAAqC,KAAK,QAA1C,oBAAsD,uBAAuB,EAA7E;IACD;EAvEH;IAAA;IAAA,OAyEE,4BAAgB;MACd,OAAO;QACL,WAAW,EAAE,KAAK,WADb;QAEL,OAAO,EAAE,KAAK,OAFT;QAGL,YAAY,EAAE,KAAK,YAHd;QAIL,KAAK,EAAE,KAAK,KAJP;QAKL,KAAK,EAAE,KAAK,KALP;QAML,SAAS,EAAE,KAAK,SANX;QAOL,QAAQ,EAAE,KAAK,QAPV;QAQL,SAAS,EAAE,KAAK;MARX,CAAP;IAUD;EApFH;IAAA;IAAA,OAsFE,sBACE,MADF,EAEE,SAFF;MAAA;;MAAA;MAAA;QAAA;UAAA;YAAA;cAIQ,OAJR,GAIkB,IAAI,mBAAJ,iCACX,MADW;gBAEd,YAAY,EAAE,KAAK;cAFL,GAJlB;cAAA;cAAA,iCAQyB,OAAO,CAAC,YAAR,CAAqB,SAArB,CARzB;;YAAA;cAQQ,QARR;cAUE,QAAQ,CAAC,YAAT,6BAAwB,QAAQ,CAAC,YAAjC,qCAAiD,KAAK,YAAtD;cACM,IAXR,GAWe,QAAQ,CAAC,gBAAT,EAXf;cAYE,KAAK,mBAAL,CAAyB,IAAzB;cAZF,iCAaS,IAbT;;YAAA;YAAA;cAAA;UAAA;QAAA;MAAA;IAAA;EAtFF;IAAA;IAAA,OAsGE,yBAAa;MAEX,OAAO,EAAE,aAAa,CAAC,YAAd,CAA2B,IAA3B,KAAoC,CAAC,KAAK,YAA5C,CAAP;IACD;EAzGH;IAAA;IAAA,OAOE,sBACE,KADF,EAKsC;MAAA,IAApC,aAAoC,uEAAZ,KAAK,EAAL,GAAU,CAAC,CAAC;;MAEpC,IAAI,CAAC,KAAL,EAAY;QACV,OAAO,KAAP;MACD;;MACD,IAAI,KAAK,CAAC,SAAV,EAAqB;QACnB,IAAM,GAAG,GAAG,uBAAuB,EAAnC;QACA,OAAO,GAAG,GAAG,KAAK,CAAC,QAAN,GAAiB,KAAK,CAAC,SAAvB,GAAmC,aAAhD;MACD;;MAED,OAAO,IAAP;IACD;EAvBH;IAAA;IAAA,OA6BE,yBAAuB,MAAvB,EAAkD;MAChD,OAAO,IAAI,aAAJ,CAAkB;QACvB,WAAW,EAAE,MAAM,CAAC,YADG;QAEvB,YAAY,EAAE,MAAM,CAAC,aAFE;QAGvB,KAAK,EAAE,MAAM,CAAC,KAHS;QAIvB,KAAK,EAAE,MAAM,CAAC,KAJS;QAKvB,OAAO,EAAE,MAAM,CAAC,QALO;QAMvB,SAAS,EAAE,MAAM,CAAC,UANK;QAOvB,SAAS,EAAE,MAAM,CAAC,UAPK;QAQvB,QAAQ,EAAE,MAAM,CAAC;MARM,CAAlB,CAAP;IAUD;EAxCH;;EAAA;AAAA;;IA4GM,O;EACJ,iBAAsB,OAAtB,EAAgC;IAAA;;IAAV,KAAA,OAAA,GAAA,OAAA;EAAc;;;;WAEpC,sBAAmB,SAAnB;MAAA;QAAA;UAAA;YAAA;cAAA,MACQ,IAAI,KAAJ,CAAU,+BAAV,CADR;;YAAA;YAAA;cAAA;UAAA;QAAA;MAAA;IAAA;;;WAIA,4BAAgB;MACd,MAAM,IAAI,KAAJ,CAAU,mCAAV,CAAN;IACD;;;WAED,wBAAY;MACV,MAAM,IAAI,KAAJ,CAAU,+BAAV,CAAN;IACD;;;;;;IAMG,Y;;;;;EAMJ,sBAAY,OAAZ,EAA4B,SAA5B,EAAgD;IAAA;;IAAA;;IAC9C,0BAAM,OAAN;IAD0B,MAAA,SAAA,GAAA,SAAA;IAE1B,MAAK,QAAL,GAAgB,OAAO,CAAC,QAAxB;IACA,MAAK,YAAL,GAAoB,OAAO,CAAC,YAA5B;IACA,MAAK,WAAL,GAAmB,OAAO,CAAC,WAA3B;IACA,MAAK,MAAL,GAAc,OAAO,CAAC,MAAtB;IAL8C;EAM/C;;;;WAED,sBAAU;MACR,IAAM,OAAO,GAAY;QAAE,gBAAgB;MAAlB,CAAzB;;MACA,IAAI,OAAO,KAAK,YAAZ,KAA6B,WAAjC,EAA8C;QAG5C,IAAM,eAAe,GAAG,kBAAkB,CAAC,KAAK,QAAN,CAA1C;QACA,IAAM,mBAAmB,GAAG,kBAAkB,CAAC,KAAK,YAAN,CAA9C;QACA,IAAM,WAAW,GAAM,eAAN,SAAyB,mBAA1C;QACA,IAAM,SAAS,GAAG,MAAM,CAAC,YAAP,CAAoB,WAApB,CAAlB;QACA,OAAO,CAAC,aAAR,cAAiC,SAAjC;MACD;;MAED,OAAO,OAAP;IACD;;;WAED,sBAAmB,SAAnB;MAAA;MAAA;QAAA;UAAA;YAAA;cAEE,SAAS,CACP,SAAS,CAAC,aADH,iEAAT;cAFF;cAAA,iCAMyB,YAAY,CACjC,SAAS,CAAC,aADuB,EAEjC;gBACE,QAAQ,EAAE,MADZ;gBAEE,MAAM,EAAE,MAFV;gBAGE,OAAO,EAAE,KAAK,UAAL,EAHX;gBAIE,IAAI,EAAE,KAAK,YAAL;cAJR,CAFiC,CANrC;;YAAA;cAMQ,QANR;;cAAA,MAgBM,WAAW,QAhBjB;gBAAA;gBAAA;cAAA;;cAAA,MAiBU,IAAI,UAAJ,CAAe,QAAf,CAjBV;;YAAA;cAAA,kCAoBS,IAAI,aAAJ,CAAkB;gBACvB,WAAW,EAAE,QAAQ,CAAC,YADC;gBAEvB,SAAS,EAAE,QAAQ,CAAC,UAFG;gBAGvB,SAAS,EAAE,QAAQ,CAAC,UAHG;gBAIvB,YAAY,EAAE,QAAQ,CAAC,aAJA;gBAKvB,KAAK,EAAE,QAAQ,CAAC,KALO;gBAMvB,OAAO,EAAE,QAAQ,CAAC,QANK;gBAOvB,QAAQ,EAAE,QAAQ,CAAC;cAPI,CAAlB,CApBT;;YAAA;YAAA;cAAA;UAAA;QAAA;MAAA;IAAA;;;WA+BA,wBAAY;MACV,IAAM,SAAS,GAA2B;QACxC,UAAU,EAAE,KAAK;MADuB,CAA1C;;MAIA,IAAI,CAAC,KAAK,YAAV,EAAwB;QAEtB,SAAS,CAAC,SAAV,GAAsB,KAAK,QAA3B;MACD;;MAED,IAAI,KAAK,MAAT,EAAiB;QACf,SAAS,CAAC,KAAV,GAAkB,KAAK,MAAL,CAAY,IAAZ,CAAiB,GAAjB,CAAlB;MACD;;MAED,IAAI,KAAK,WAAT,EAAsB;QACpB,KAAK,IAAM,KAAX,IAAoB,KAAK,WAAzB,EAAsC;UACpC,IAAI,KAAK,IAAI,KAAK,WAAd,IAA6B,EAAE,KAAK,IAAI,SAAX,CAAjC,EAAwD;YACtD,SAAS,CAAC,KAAD,CAAT,GAAmB,KAAK,WAAL,CAAiB,KAAjB,CAAnB;UACD;QACF;MACF;;MACD,OAAO,SAAP;IACD;;;;EAlFsD,O;;AA0FzD,WAAa,kBAAb;EAAA;;EAAA;;EAOE,4BAAY,OAAZ,EAA6C;IAAA;;IAAA;;IAC3C,SAAS,CACP,OAAO,CAAC,WADD,2HAEoH,QAAQ,CAAC,MAAT,CACzH;MACE,GAAG,EAAE,kCADP;MAEE,OAAO,EAAE;IAFX,CADyH,CAFpH,CAAT;IAUA,SAAS,CACP,OAAO,CAAC,IADD,6IAAT;IAIA,4BAAM,OAAN,EAAe,SAAS,CAAC,iBAAzB;IACA,OAAK,IAAL,GAAY,OAAO,CAAC,IAApB;IACA,OAAK,WAAL,GAAmB,OAAO,CAAC,WAA3B;IAjB2C;EAkB5C;;EAzBH;IAAA;IAAA,OA2BE,wBAAY;MACV,IAAM,SAAS,uFAAf;;MAEA,IAAI,KAAK,WAAT,EAAsB;QACpB,SAAS,CAAC,YAAV,GAAyB,KAAK,WAA9B;MACD;;MAED,IAAI,KAAK,IAAT,EAAe;QACb,SAAS,CAAC,IAAV,GAAiB,KAAK,IAAtB;MACD;;MAED,OAAO,SAAP;IACD;EAvCH;IAAA;IAAA,OAyCE,4BAAgB;MACd,OAAO;QACL,QAAQ,EAAE,KAAK,QADV;QAEL,YAAY,EAAE,KAAK,YAFd;QAGL,SAAS,EAAE,KAAK,SAHX;QAIL,IAAI,EAAE,KAAK,IAJN;QAKL,WAAW,EAAE,KAAK,WALb;QAML,WAAW,EAAE,KAAK,WANb;QAOL,MAAM,EAAE,KAAK;MAPR,CAAP;IASD;EAnDH;;EAAA;AAAA,EACU,YADV;AA2DA,WAAa,mBAAb;EAAA;;EAAA;;EAME,6BAAY,OAAZ,EAA8C;IAAA;;IAAA;;IAC5C,SAAS,CAAC,OAAO,CAAC,YAAT,2DAAT;IACA,4BAAM,OAAN,EAAe,SAAS,CAAC,YAAzB;IACA,OAAK,YAAL,GAAoB,OAAO,CAAC,YAA5B;IAH4C;EAI7C;;EAVH;IAAA;IAAA,OAYE,wBAAY;MACV,IAAM,SAAS,wFAAf;;MAEA,IAAI,KAAK,YAAT,EAAuB;QACrB,SAAS,CAAC,aAAV,GAA0B,KAAK,YAA/B;MACD;;MAED,OAAO,SAAP;IACD;EApBH;IAAA;IAAA,OAsBE,4BAAgB;MACd,OAAO;QACL,QAAQ,EAAE,KAAK,QADV;QAEL,YAAY,EAAE,KAAK,YAFd;QAGL,SAAS,EAAE,KAAK,SAHX;QAIL,YAAY,EAAE,KAAK,YAJd;QAKL,WAAW,EAAE,KAAK,WALb;QAML,MAAM,EAAE,KAAK;MANR,CAAP;IAQD;EA/BH;;EAAA;AAAA,EACU,YADV;AAuCA,WAAa,kBAAb;EAAA;;EAAA;;EASE,4BAAY,OAAZ,EAA6C;IAAA;;IAAA;;IAC3C,4BAAM,OAAN;IACA,SAAS,CAAC,OAAO,CAAC,KAAT,6DAAT;IACA,OAAK,QAAL,GAAgB,OAAO,CAAC,QAAxB;IACA,OAAK,YAAL,GAAoB,OAAO,CAAC,YAA5B;IACA,OAAK,KAAL,GAAa,OAAO,CAAC,KAArB;IACA,OAAK,aAAL,GAAqB,OAAO,CAAC,aAA7B;IAN2C;EAO5C;;EAhBH;IAAA;IAAA,OAkBE,sBAAU;MACR,IAAM,OAAO,GAAY;QAAE,gBAAgB;MAAlB,CAAzB;;MACA,IAAI,OAAO,KAAK,YAAZ,KAA6B,WAA7B,IAA4C,KAAK,QAArD,EAA+D;QAG7D,IAAM,eAAe,GAAG,kBAAkB,CAAC,KAAK,QAAN,CAA1C;QACA,IAAM,mBAAmB,GAAG,kBAAkB,CAAC,KAAK,YAAN,CAA9C;QACA,IAAM,WAAW,GAAM,eAAN,SAAyB,mBAA1C;QACA,IAAM,SAAS,GAAG,MAAM,CAAC,YAAP,CAAoB,WAApB,CAAlB;QACA,OAAO,CAAC,aAAR,cAAiC,SAAjC;MACD;;MAED,OAAO,OAAP;IACD;EA/BH;IAAA;IAAA,OAsCE,sBAAmB,SAAnB;MAAA;QAAA;UAAA;YAAA;cACE,SAAS,CACP,SAAS,CAAC,kBADH,sEAAT;cADF;cAAA,iCAKQ,YAAY,CAAU,SAAS,CAAC,kBAApB,EAAwC;gBACxD,MAAM,EAAE,MADgD;gBAExD,OAAO,EAAE,KAAK,UAAL,EAF+C;gBAGxD,IAAI,EAAE,KAAK,YAAL;cAHkD,CAAxC,CALpB;;YAAA;cAAA,kCAWS,IAXT;;YAAA;YAAA;cAAA;UAAA;QAAA;MAAA;IAAA;EAtCF;IAAA;IAAA,OAoDE,4BAAgB;MACd,OAAO;QACL,QAAQ,EAAE,KAAK,QADV;QAEL,YAAY,EAAE,KAAK,YAFd;QAGL,KAAK,EAAE,KAAK,KAHP;QAIL,aAAa,EAAE,KAAK;MAJf,CAAP;IAMD;EA3DH;IAAA;IAAA,OA6DE,wBAAY;MACV,IAAM,SAAS,GAA2B;QAAE,KAAK,EAAE,KAAK;MAAd,CAA1C;;MACA,IAAI,KAAK,aAAT,EAAwB;QACtB,SAAS,CAAC,eAAV,GAA4B,KAAK,aAAjC;MACD;;MAED,IAAI,KAAK,QAAT,EAAmB;QACjB,SAAS,CAAC,SAAV,GAAsB,KAAK,QAA3B;MACD;;MACD,IAAI,KAAK,YAAT,EAAuB;QACrB,SAAS,CAAC,aAAV,GAA0B,KAAK,YAA/B;MACD;;MACD,OAAO,SAAP;IACD;EA1EH;;EAAA;AAAA,EACU,OADV;AAqFA,OAAM,SAAU,iBAAV,CACJ,MADI,EAEJ,SAFI,EAE6D;EAEjE,IAAM,OAAO,GAAG,IAAI,kBAAJ,CAAuB,MAAvB,CAAhB;EACA,OAAO,OAAO,CAAC,YAAR,CAAqB,SAArB,CAAP;AACD;AAeD,OAAM,SAAU,YAAV,CACJ,MADI,EAEJ,SAFI,EAE6D;EAEjE,IAAM,OAAO,GAAG,IAAI,mBAAJ,CAAwB,MAAxB,CAAhB;EACA,OAAO,OAAO,CAAC,YAAR,CAAqB,SAArB,CAAP;AACD;AAUD,OAAM,SAAU,WAAV,CACJ,MADI,EAEJ,SAFI,EAEkE;EAEtE,IAAM,OAAO,GAAG,IAAI,kBAAJ,CAAuB,MAAvB,CAAhB;EACA,OAAO,OAAO,CAAC,YAAR,CAAqB,SAArB,CAAP;AACD;AAUD,OAAM,SAAU,kBAAV,CACJ,MADI,EAEJ,SAFI,EAEgE;EAEpE,IAAI,CAAC,SAAS,CAAC,gBAAf,EAAiC;IAC/B,MAAM,IAAI,KAAJ,CAAU,4EAAV,CAAN;EACD;;EACD,OAAO,YAAY,CAAsB,SAAS,CAAC,gBAAhC,EAAkD;IACnE,OAAO,EAAE;MACP,gBAAgB,mCADT;MAEP,aAAa,cAAY,MAAM,CAAC;IAFzB,CAD0D;IAKnE,QAAQ,EAAE,MALyD;IAMnE,MAAM,EAAE;EAN2D,CAAlD,CAAnB;AAQD","sourcesContent":["import invariant from 'invariant';\nimport { Platform } from 'react-native';\n\nimport * as Base64 from './Base64';\nimport * as ServiceConfig from './Discovery';\nimport { ResponseErrorConfig, TokenError } from './Errors';\nimport { Headers, requestAsync } from './Fetch';\nimport {\n  AccessTokenRequestConfig,\n  GrantType,\n  RefreshTokenRequestConfig,\n  RevokeTokenRequestConfig,\n  ServerTokenResponseConfig,\n  TokenRequestConfig,\n  TokenResponseConfig,\n  TokenType,\n  TokenTypeHint,\n} from './TokenRequest.types';\n\n/**\n * Returns the current time in seconds.\n */\nexport function getCurrentTimeInSeconds(): number {\n  return Math.floor(Date.now() / 1000);\n}\n\n/**\n * Token Response.\n *\n * [Section 5.1](https://tools.ietf.org/html/rfc6749#section-5.1)\n */\nexport class TokenResponse implements TokenResponseConfig {\n  /**\n   * Determines whether a token refresh request must be made to refresh the tokens\n   *\n   * @param token\n   * @param secondsMargin\n   */\n  static isTokenFresh(\n    token: Pick<TokenResponse, 'expiresIn' | 'issuedAt'>,\n    /**\n     * -10 minutes in seconds\n     */\n    secondsMargin: number = 60 * 10 * -1\n  ): boolean {\n    if (!token) {\n      return false;\n    }\n    if (token.expiresIn) {\n      const now = getCurrentTimeInSeconds();\n      return now < token.issuedAt + token.expiresIn + secondsMargin;\n    }\n    // if there is no expiration time but we have an access token, it is assumed to never expire\n    return true;\n  }\n  /**\n   * Creates a `TokenResponse` from query parameters returned from an `AuthRequest`.\n   *\n   * @param params\n   */\n  static fromQueryParams(params: Record<string, any>): TokenResponse {\n    return new TokenResponse({\n      accessToken: params.access_token,\n      refreshToken: params.refresh_token,\n      scope: params.scope,\n      state: params.state,\n      idToken: params.id_token,\n      tokenType: params.token_type,\n      expiresIn: params.expires_in,\n      issuedAt: params.issued_at,\n    });\n  }\n\n  accessToken: string;\n  tokenType: TokenType;\n  expiresIn?: number;\n  refreshToken?: string;\n  scope?: string;\n  state?: string;\n  idToken?: string;\n  issuedAt: number;\n\n  constructor(response: TokenResponseConfig) {\n    this.accessToken = response.accessToken;\n    this.tokenType = response.tokenType ?? 'bearer';\n    this.expiresIn = response.expiresIn;\n    this.refreshToken = response.refreshToken;\n    this.scope = response.scope;\n    this.state = response.state;\n    this.idToken = response.idToken;\n    this.issuedAt = response.issuedAt ?? getCurrentTimeInSeconds();\n  }\n\n  private applyResponseConfig(response: TokenResponseConfig) {\n    this.accessToken = response.accessToken ?? this.accessToken;\n    this.tokenType = response.tokenType ?? this.tokenType ?? 'bearer';\n    this.expiresIn = response.expiresIn ?? this.expiresIn;\n    this.refreshToken = response.refreshToken ?? this.refreshToken;\n    this.scope = response.scope ?? this.scope;\n    this.state = response.state ?? this.state;\n    this.idToken = response.idToken ?? this.idToken;\n    this.issuedAt = response.issuedAt ?? this.issuedAt ?? getCurrentTimeInSeconds();\n  }\n\n  getRequestConfig(): TokenResponseConfig {\n    return {\n      accessToken: this.accessToken,\n      idToken: this.idToken,\n      refreshToken: this.refreshToken,\n      scope: this.scope,\n      state: this.state,\n      tokenType: this.tokenType,\n      issuedAt: this.issuedAt,\n      expiresIn: this.expiresIn,\n    };\n  }\n\n  async refreshAsync(\n    config: Omit<TokenRequestConfig, 'grantType' | 'refreshToken'>,\n    discovery: Pick<ServiceConfig.DiscoveryDocument, 'tokenEndpoint'>\n  ): Promise<TokenResponse> {\n    const request = new RefreshTokenRequest({\n      ...config,\n      refreshToken: this.refreshToken,\n    });\n    const response = await request.performAsync(discovery);\n    // Custom: reuse the refresh token if one wasn't returned\n    response.refreshToken = response.refreshToken ?? this.refreshToken;\n    const json = response.getRequestConfig();\n    this.applyResponseConfig(json);\n    return this;\n  }\n\n  shouldRefresh(): boolean {\n    // no refresh token available and token has expired\n    return !(TokenResponse.isTokenFresh(this) || !this.refreshToken);\n  }\n}\n\nclass Request<T, B> {\n  constructor(protected request: T) {}\n\n  async performAsync(discovery: ServiceConfig.DiscoveryDocument): Promise<B> {\n    throw new Error('performAsync must be extended');\n  }\n\n  getRequestConfig(): T {\n    throw new Error('getRequestConfig must be extended');\n  }\n\n  getQueryBody(): Record<string, string> {\n    throw new Error('getQueryBody must be extended');\n  }\n}\n\n/**\n * A generic token request.\n */\nclass TokenRequest<T extends TokenRequestConfig> extends Request<T, TokenResponse> {\n  readonly clientId: string;\n  readonly clientSecret?: string;\n  readonly scopes?: string[];\n  readonly extraParams?: Record<string, string>;\n\n  constructor(request, public grantType: GrantType) {\n    super(request);\n    this.clientId = request.clientId;\n    this.clientSecret = request.clientSecret;\n    this.extraParams = request.extraParams;\n    this.scopes = request.scopes;\n  }\n\n  getHeaders(): Headers {\n    const headers: Headers = { 'Content-Type': 'application/x-www-form-urlencoded' };\n    if (typeof this.clientSecret !== 'undefined') {\n      // If client secret exists, it should be converted to base64\n      // https://tools.ietf.org/html/rfc6749#section-2.3.1\n      const encodedClientId = encodeURIComponent(this.clientId);\n      const encodedClientSecret = encodeURIComponent(this.clientSecret);\n      const credentials = `${encodedClientId}:${encodedClientSecret}`;\n      const basicAuth = Base64.encodeNoWrap(credentials);\n      headers.Authorization = `Basic ${basicAuth}`;\n    }\n\n    return headers;\n  }\n\n  async performAsync(discovery: Pick<ServiceConfig.DiscoveryDocument, 'tokenEndpoint'>) {\n    // redirect URI must not be nil\n    invariant(\n      discovery.tokenEndpoint,\n      `Cannot invoke \\`performAsync()\\` without a valid tokenEndpoint`\n    );\n    const response = await requestAsync<ServerTokenResponseConfig | ResponseErrorConfig>(\n      discovery.tokenEndpoint,\n      {\n        dataType: 'json',\n        method: 'POST',\n        headers: this.getHeaders(),\n        body: this.getQueryBody(),\n      }\n    );\n\n    if ('error' in response) {\n      throw new TokenError(response);\n    }\n\n    return new TokenResponse({\n      accessToken: response.access_token,\n      tokenType: response.token_type,\n      expiresIn: response.expires_in,\n      refreshToken: response.refresh_token,\n      scope: response.scope,\n      idToken: response.id_token,\n      issuedAt: response.issued_at,\n    });\n  }\n\n  getQueryBody() {\n    const queryBody: Record<string, string> = {\n      grant_type: this.grantType,\n    };\n\n    if (!this.clientSecret) {\n      // Only add the client ID if client secret is not present, otherwise pass the client id with the secret in the request body.\n      queryBody.client_id = this.clientId;\n    }\n\n    if (this.scopes) {\n      queryBody.scope = this.scopes.join(' ');\n    }\n\n    if (this.extraParams) {\n      for (const extra in this.extraParams) {\n        if (extra in this.extraParams && !(extra in queryBody)) {\n          queryBody[extra] = this.extraParams[extra];\n        }\n      }\n    }\n    return queryBody;\n  }\n}\n\n/**\n * Access token request. Exchange an authorization code for a user access token.\n *\n * [Section 4.1.3](https://tools.ietf.org/html/rfc6749#section-4.1.3)\n */\nexport class AccessTokenRequest\n  extends TokenRequest<AccessTokenRequestConfig>\n  implements AccessTokenRequestConfig\n{\n  readonly code: string;\n  readonly redirectUri: string;\n\n  constructor(options: AccessTokenRequestConfig) {\n    invariant(\n      options.redirectUri,\n      `\\`AccessTokenRequest\\` requires a valid \\`redirectUri\\` (it must also match the one used in the auth request). Example: ${Platform.select(\n        {\n          web: 'https://yourwebsite.com/redirect',\n          default: 'myapp://redirect',\n        }\n      )}`\n    );\n\n    invariant(\n      options.code,\n      `\\`AccessTokenRequest\\` requires a valid authorization \\`code\\`. This is what's received from the authorization server after an auth request.`\n    );\n    super(options, GrantType.AuthorizationCode);\n    this.code = options.code;\n    this.redirectUri = options.redirectUri;\n  }\n\n  getQueryBody() {\n    const queryBody: Record<string, string> = super.getQueryBody();\n\n    if (this.redirectUri) {\n      queryBody.redirect_uri = this.redirectUri;\n    }\n\n    if (this.code) {\n      queryBody.code = this.code;\n    }\n\n    return queryBody;\n  }\n\n  getRequestConfig() {\n    return {\n      clientId: this.clientId,\n      clientSecret: this.clientSecret,\n      grantType: this.grantType,\n      code: this.code,\n      redirectUri: this.redirectUri,\n      extraParams: this.extraParams,\n      scopes: this.scopes,\n    };\n  }\n}\n\n/**\n * Refresh request.\n *\n * [Section 6](https://tools.ietf.org/html/rfc6749#section-6)\n */\nexport class RefreshTokenRequest\n  extends TokenRequest<RefreshTokenRequestConfig>\n  implements RefreshTokenRequestConfig\n{\n  readonly refreshToken?: string;\n\n  constructor(options: RefreshTokenRequestConfig) {\n    invariant(options.refreshToken, `\\`RefreshTokenRequest\\` requires a valid \\`refreshToken\\`.`);\n    super(options, GrantType.RefreshToken);\n    this.refreshToken = options.refreshToken;\n  }\n\n  getQueryBody() {\n    const queryBody = super.getQueryBody();\n\n    if (this.refreshToken) {\n      queryBody.refresh_token = this.refreshToken;\n    }\n\n    return queryBody;\n  }\n\n  getRequestConfig() {\n    return {\n      clientId: this.clientId,\n      clientSecret: this.clientSecret,\n      grantType: this.grantType,\n      refreshToken: this.refreshToken,\n      extraParams: this.extraParams,\n      scopes: this.scopes,\n    };\n  }\n}\n\n/**\n * Revocation request for a given token.\n *\n * [Section 2.1](https://tools.ietf.org/html/rfc7009#section-2.1)\n */\nexport class RevokeTokenRequest\n  extends Request<RevokeTokenRequestConfig, boolean>\n  implements RevokeTokenRequestConfig\n{\n  readonly clientId?: string;\n  readonly clientSecret?: string;\n  readonly token: string;\n  readonly tokenTypeHint?: TokenTypeHint;\n\n  constructor(request: RevokeTokenRequestConfig) {\n    super(request);\n    invariant(request.token, `\\`RevokeTokenRequest\\` requires a valid \\`token\\` to revoke.`);\n    this.clientId = request.clientId;\n    this.clientSecret = request.clientSecret;\n    this.token = request.token;\n    this.tokenTypeHint = request.tokenTypeHint;\n  }\n\n  getHeaders(): Headers {\n    const headers: Headers = { 'Content-Type': 'application/x-www-form-urlencoded' };\n    if (typeof this.clientSecret !== 'undefined' && this.clientId) {\n      // If client secret exists, it should be converted to base64\n      // https://tools.ietf.org/html/rfc6749#section-2.3.1\n      const encodedClientId = encodeURIComponent(this.clientId);\n      const encodedClientSecret = encodeURIComponent(this.clientSecret);\n      const credentials = `${encodedClientId}:${encodedClientSecret}`;\n      const basicAuth = Base64.encodeNoWrap(credentials);\n      headers.Authorization = `Basic ${basicAuth}`;\n    }\n\n    return headers;\n  }\n\n  /**\n   * Perform a token revocation request.\n   *\n   * @param discovery The `revocationEndpoint` for a provider.\n   */\n  async performAsync(discovery: Pick<ServiceConfig.DiscoveryDocument, 'revocationEndpoint'>) {\n    invariant(\n      discovery.revocationEndpoint,\n      `Cannot invoke \\`performAsync()\\` without a valid revocationEndpoint`\n    );\n    await requestAsync<boolean>(discovery.revocationEndpoint, {\n      method: 'POST',\n      headers: this.getHeaders(),\n      body: this.getQueryBody(),\n    });\n\n    return true;\n  }\n\n  getRequestConfig() {\n    return {\n      clientId: this.clientId,\n      clientSecret: this.clientSecret,\n      token: this.token,\n      tokenTypeHint: this.tokenTypeHint,\n    };\n  }\n\n  getQueryBody(): Record<string, string> {\n    const queryBody: Record<string, string> = { token: this.token };\n    if (this.tokenTypeHint) {\n      queryBody.token_type_hint = this.tokenTypeHint;\n    }\n    // Include client creds https://tools.ietf.org/html/rfc6749#section-2.3.1\n    if (this.clientId) {\n      queryBody.client_id = this.clientId;\n    }\n    if (this.clientSecret) {\n      queryBody.client_secret = this.clientSecret;\n    }\n    return queryBody;\n  }\n}\n\n// @needsAudit\n/**\n * Exchange an authorization code for an access token that can be used to get data from the provider.\n *\n * @param config Configuration used to exchange the code for a token.\n * @param discovery The `tokenEndpoint` for a provider.\n * @return Returns a discovery document with a valid `tokenEndpoint` URL.\n */\nexport function exchangeCodeAsync(\n  config: AccessTokenRequestConfig,\n  discovery: Pick<ServiceConfig.DiscoveryDocument, 'tokenEndpoint'>\n): Promise<TokenResponse> {\n  const request = new AccessTokenRequest(config);\n  return request.performAsync(discovery);\n}\n\n// @needsAudit\n/**\n * Refresh an access token.\n * - If the provider didn't return a `refresh_token` then the access token may not be refreshed.\n * - If the provider didn't return a `expires_in` then it's assumed that the token does not expire.\n * - Determine if a token needs to be refreshed via `TokenResponse.isTokenFresh()` or `shouldRefresh()` on an instance of `TokenResponse`.\n *\n * @see [Section 6](https://tools.ietf.org/html/rfc6749#section-6).\n *\n * @param config Configuration used to refresh the given access token.\n * @param discovery The `tokenEndpoint` for a provider.\n * @return Returns a discovery document with a valid `tokenEndpoint` URL.\n */\nexport function refreshAsync(\n  config: RefreshTokenRequestConfig,\n  discovery: Pick<ServiceConfig.DiscoveryDocument, 'tokenEndpoint'>\n): Promise<TokenResponse> {\n  const request = new RefreshTokenRequest(config);\n  return request.performAsync(discovery);\n}\n\n// @needsAudit\n/**\n * Revoke a token with a provider. This makes the token unusable, effectively requiring the user to login again.\n *\n * @param config Configuration used to revoke a refresh or access token.\n * @param discovery The `revocationEndpoint` for a provider.\n * @return Returns a discovery document with a valid `revocationEndpoint` URL. Many providers do not support this feature.\n */\nexport function revokeAsync(\n  config: RevokeTokenRequestConfig,\n  discovery: Pick<ServiceConfig.DiscoveryDocument, 'revocationEndpoint'>\n): Promise<boolean> {\n  const request = new RevokeTokenRequest(config);\n  return request.performAsync(discovery);\n}\n\n/**\n * Fetch generic user info from the provider's OpenID Connect `userInfoEndpoint` (if supported).\n *\n * @see [UserInfo](https://openid.net/specs/openid-connect-core-1_0.html#UserInfo).\n *\n * @param config The `accessToken` for a user, returned from a code exchange or auth request.\n * @param discovery The `userInfoEndpoint` for a provider.\n */\nexport function fetchUserInfoAsync(\n  config: Pick<TokenResponse, 'accessToken'>,\n  discovery: Pick<ServiceConfig.DiscoveryDocument, 'userInfoEndpoint'>\n): Promise<Record<string, any>> {\n  if (!discovery.userInfoEndpoint) {\n    throw new Error('User info endpoint is not defined in the service config discovery document');\n  }\n  return requestAsync<Record<string, any>>(discovery.userInfoEndpoint, {\n    headers: {\n      'Content-Type': 'application/x-www-form-urlencoded',\n      Authorization: `Bearer ${config.accessToken}`,\n    },\n    dataType: 'json',\n    method: 'GET',\n  });\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}