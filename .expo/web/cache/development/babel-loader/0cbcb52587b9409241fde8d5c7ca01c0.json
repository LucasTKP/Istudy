{"ast":null,"code":"var _window$document;\n\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { Platform } from 'expo-modules-core';\nimport qs from 'qs';\nvar isDOMAvailable = Platform.OS === 'web' && typeof window !== 'undefined' && !!((_window$document = window.document) != null && _window$document.createElement) && typeof URL !== 'undefined';\nexport function requestAsync(requestUrl, fetchRequest) {\n  var _fetchRequest$dataTyp;\n\n  var url, request, isJsonDataType, i, _fetchRequest$method, _i, _Object$keys, key, correctedUrl, response, contentType;\n\n  return _regeneratorRuntime.async(function requestAsync$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          if (!(Platform.OS === 'web' && !isDOMAvailable)) {\n            _context.next = 2;\n            break;\n          }\n\n          return _context.abrupt(\"return\");\n\n        case 2:\n          url = new URL(requestUrl);\n          request = {\n            method: fetchRequest.method,\n            mode: 'cors',\n            headers: {}\n          };\n          isJsonDataType = ((_fetchRequest$dataTyp = fetchRequest.dataType) == null ? void 0 : _fetchRequest$dataTyp.toLowerCase()) === 'json';\n\n          if (fetchRequest.headers) {\n            for (i in fetchRequest.headers) {\n              if (i in fetchRequest.headers) {\n                request.headers[i] = fetchRequest.headers[i];\n              }\n            }\n          }\n\n          if (fetchRequest.body) {\n            if (((_fetchRequest$method = fetchRequest.method) == null ? void 0 : _fetchRequest$method.toUpperCase()) === 'POST') {\n              request.body = qs.stringify(fetchRequest.body);\n            } else {\n              for (_i = 0, _Object$keys = Object.keys(fetchRequest.body); _i < _Object$keys.length; _i++) {\n                key = _Object$keys[_i];\n                url.searchParams.append(key, fetchRequest.body[key]);\n              }\n            }\n          }\n\n          if (isJsonDataType && !('Accept' in request.headers)) {\n            request.headers['Accept'] = 'application/json, text/javascript; q=0.01';\n          }\n\n          correctedUrl = url.toString().replace(/\\/$/, '');\n          _context.next = 11;\n          return _regeneratorRuntime.awrap(fetch(correctedUrl, request));\n\n        case 11:\n          response = _context.sent;\n          contentType = response.headers.get('content-type');\n\n          if (!(isJsonDataType || contentType != null && contentType.includes('application/json'))) {\n            _context.next = 15;\n            break;\n          }\n\n          return _context.abrupt(\"return\", response.json());\n\n        case 15:\n          return _context.abrupt(\"return\", response.text());\n\n        case 16:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}","map":{"version":3,"sources":["../src/Fetch.ts"],"names":[],"mappings":";;;AAAA,SAAS,QAAT,QAAyB,mBAAzB;AACA,OAAO,EAAP,MAAe,IAAf;AAgBA,IAAM,cAAc,GAClB,QAAQ,CAAC,EAAT,KAAgB,KAAhB,IACA,OAAO,MAAP,KAAkB,WADlB,IAEA,CAAC,sBAAC,MAAM,CAAC,QAAR,aAAC,iBAAiB,aAAlB,CAFD,IAGA,OAAO,GAAP,KAAe,WAJjB;AAMA,OAAO,SAAe,YAAf,CAA+B,UAA/B,EAAmD,YAAnD;EAAA;;EAAA;;EAAA;IAAA;MAAA;QAAA;UAAA,MACD,QAAQ,CAAC,EAAT,KAAgB,KAAhB,IAAyB,CAAC,cADzB;YAAA;YAAA;UAAA;;UAAA;;QAAA;UAKC,GALD,GAKO,IAAI,GAAJ,CAAQ,UAAR,CALP;UAOC,OAPD,GAOoE;YACvE,MAAM,EAAE,YAAY,CAAC,MADkD;YAEvE,IAAI,EAAE,MAFiE;YAGvE,OAAO,EAAE;UAH8D,CAPpE;UAaC,cAbD,GAakB,0BAAA,YAAY,CAAC,QAAb,2CAAuB,WAAvB,QAAyC,MAb3D;;UAeL,IAAI,YAAY,CAAC,OAAjB,EAA0B;YACxB,KAAW,CAAX,IAAgB,YAAY,CAAC,OAA7B,EAAsC;cACpC,IAAI,CAAC,IAAI,YAAY,CAAC,OAAtB,EAA+B;gBAC7B,OAAO,CAAC,OAAR,CAAgB,CAAhB,IAAqB,YAAY,CAAC,OAAb,CAAqB,CAArB,CAArB;cACD;YACF;UACF;;UAED,IAAI,YAAY,CAAC,IAAjB,EAAuB;YACrB,IAAI,yBAAA,YAAY,CAAC,MAAb,0CAAqB,WAArB,QAAuC,MAA3C,EAAmD;cACjD,OAAO,CAAC,IAAR,GAAe,EAAE,CAAC,SAAH,CAAa,YAAY,CAAC,IAA1B,CAAf;YACD,CAFD,MAEO;cACL,4BAAkB,MAAM,CAAC,IAAP,CAAY,YAAY,CAAC,IAAzB,CAAlB,kCAAkD;gBAAvC,GAAuC;gBAChD,GAAG,CAAC,YAAJ,CAAiB,MAAjB,CAAwB,GAAxB,EAA6B,YAAY,CAAC,IAAb,CAAkB,GAAlB,CAA7B;cACD;YACF;UACF;;UAED,IAAI,cAAc,IAAI,EAAE,YAAY,OAAO,CAAC,OAAtB,CAAtB,EAAsD;YAEpD,OAAO,CAAC,OAAR,CAAgB,QAAhB,IAA4B,2CAA5B;UACD;;UAGK,YAvCD,GAuCgB,GAAG,CAAC,QAAJ,GAAe,OAAf,CAAuB,KAAvB,EAA8B,EAA9B,CAvChB;UAAA;UAAA,iCAyCkB,KAAK,CAAC,YAAD,EAAe,OAAf,CAzCvB;;QAAA;UAyCC,QAzCD;UA2CC,WA3CD,GA2Ce,QAAQ,CAAC,OAAT,CAAiB,GAAjB,CAAqB,cAArB,CA3Cf;;UAAA,MA4CD,cAAc,IAAI,WAAJ,YAAI,WAAW,CAAE,QAAb,CAAsB,kBAAtB,CA5CjB;YAAA;YAAA;UAAA;;UAAA,iCA6CI,QAAQ,CAAC,IAAT,EA7CJ;;QAAA;UAAA,iCAgDE,QAAQ,CAAC,IAAT,EAhDF;;QAAA;QAAA;UAAA;MAAA;IAAA;EAAA;AAAA","sourcesContent":["import { Platform } from 'expo-modules-core';\nimport qs from 'qs';\n\nexport type Headers = Record<string, string> & {\n  'Content-Type': string;\n  Authorization?: string;\n  Accept?: string;\n};\n\nexport type FetchRequest = {\n  headers?: Headers;\n  body?: Record<string, string>;\n  dataType?: string;\n  method?: string;\n};\n\n// TODO(Bacon): pending react-native-adapter publish after sdk 38\nconst isDOMAvailable =\n  Platform.OS === 'web' &&\n  typeof window !== 'undefined' &&\n  !!window.document?.createElement &&\n  typeof URL !== 'undefined';\n\nexport async function requestAsync<T>(requestUrl: string, fetchRequest: FetchRequest): Promise<T> {\n  if (Platform.OS === 'web' && !isDOMAvailable) {\n    // @ts-ignore\n    return;\n  }\n  const url = new URL(requestUrl);\n\n  const request: Omit<RequestInit, 'headers'> & { headers: HeadersInit } = {\n    method: fetchRequest.method,\n    mode: 'cors',\n    headers: {},\n  };\n\n  const isJsonDataType = fetchRequest.dataType?.toLowerCase() === 'json';\n\n  if (fetchRequest.headers) {\n    for (const i in fetchRequest.headers) {\n      if (i in fetchRequest.headers) {\n        request.headers[i] = fetchRequest.headers[i] as string;\n      }\n    }\n  }\n\n  if (fetchRequest.body) {\n    if (fetchRequest.method?.toUpperCase() === 'POST') {\n      request.body = qs.stringify(fetchRequest.body);\n    } else {\n      for (const key of Object.keys(fetchRequest.body)) {\n        url.searchParams.append(key, fetchRequest.body[key]);\n      }\n    }\n  }\n\n  if (isJsonDataType && !('Accept' in request.headers)) {\n    // NOTE: Github authentication will return XML if this includes the standard `*/*`\n    request.headers['Accept'] = 'application/json, text/javascript; q=0.01';\n  }\n\n  // Fix a problem with React Native `URL` causing a trailing slash to be added.\n  const correctedUrl = url.toString().replace(/\\/$/, '');\n\n  const response = await fetch(correctedUrl, request);\n\n  const contentType = response.headers.get('content-type');\n  if (isJsonDataType || contentType?.includes('application/json')) {\n    return response.json();\n  }\n  // @ts-ignore: Type 'string' is not assignable to type 'T'.\n  return response.text();\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}